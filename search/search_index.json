{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>\ud83d\udc4b Hi, I\u2019m Monte Jones</p> <p>\ud83d\udc40 I\u2019m interested in software development, IT automation, problem-solving, and collaborating on innovative projects.</p> <p>\ud83c\udf31 I\u2019m currently learning Kubernetes, AWS  and continuously enhancing my skills in Python programming and software development methodologies.</p> <p>\ud83d\udc9e\ufe0f I\u2019m looking to collaborate on projects related to automation, software development, and IT solutions that require creative problem-solving.</p> <p>\ud83d\udceb How to reach me:</p> <p>LinkedIn GitHub</p>"},{"location":"resume/","title":"Resume","text":"<p>Monte Jones Quitman, TX 75783   montepjones@gmail.com linkedin.com/in/montepjones/</p> <p>TECHNICAL SUPPORT ENGINEER</p> <p>Results-driven software engineer with expertise in automating IT operations, developing software solutions, and troubleshooting system inefficiencies. Skilled in Python, Bash, and SQL to streamline workflows and enhance decision-making processes. Adept at following the Software Development Life Cycle (SDLC) to ensure on-time project delivery while maintaining high-quality standards. Quick to learn new technologies, collaborate with cross-functional teams, and implement best practices to optimize software performance and user experience.</p> <p>TECHNICAL SKILLS Platforms: Windows, Linux, AS400, MAC OS Languages: Python, JavaScript, CSharp, Vue, HTML, CSS, BASH Tools: SQL, Docker, Git / GitHub, MS Office (Word, Excel)</p> <p>PROFESSIONAL EXPERIENCE OPTUM FINANCIAL, Plano, TX  2014 \u2013 2025  Implementation Specialist II | Software Engineer, 2015 \u2013 2025 Interfaced with diverse range of clients to manage the implementation of configurable healthcare e-payment and digital claim payment processing solutions for B2C and B2B payees. Utilized software development skills to conduct end to end testing of the client\u2019s total payment solution, including deployment of virtual card payment system. Worked closely with client teams to manage implementation to production and conduct post-production maintenance/support to resolve client issues. Provided front-end web development to support product release. Serve as resource in educating and training new team members.</p> <ul> <li>Played key role as remote Python developer in creating and delivering client specific electronic Explanation of Benefits (EOB)s that meet the unique needs of each healthcare providers and insurance payers.  </li> <li>Implemented the process to automate The VPay VCard solutions that generates a unique 16-digit card number tied to specific claim and approved dollar amount as dictated by the claim.  </li> <li>Successfully planned, executed, and optimized system upgrades from CentOS 6 to CentOS 7, then to CentOS 8, ensuring minimal downtime and improved system performance.  </li> <li>Tier 3 Technical Support \u2013 Production Systems: Provided advanced troubleshooting and escalation support for critical production environments.  </li> <li>Recognized as support expert and team trainer, overseeing development of new team members since 2016.  </li> <li>Translated PHP scripts into Python 3, streamlining processes and enhancing compatibility with modern frameworks.  </li> <li>Upgraded legacy production systems from Python 2.7 to Python 3.8.18, ensuring seamless functionality and improved maintainability.  </li> <li>Employee of the quarter Q4 2021</li> <li>Successfully planned, executed, and optimized system upgrades from CentOS 6 to CentOS 7, then to CentOS 8, ensuring minimal downtime and improved system performance.</li> </ul> <p>Production Support Team Lead, 2014 \u2013 2015  Oversaw and managed the end-to-end production processes for all in-house software coding and development of customized payment distribution systems. Interfaced with third party administrators, insurance companies, and individual payees to address all escalated issues. Conducted root cause analysis to identify and resolve outstanding SLA issues and emergency system failures. Led teams in setting up/defining standard test environments, tests plans, and test scripts. Gathered, consolidated, and prepared reports on end-to-end and functional testing data.</p> <ul> <li>Served as main point of contact in working with Development teams to test, confirm, and deploy critical solutions that resolved issues and ensured full functionally of production operations.  </li> <li>Coordinated team training regarding proper use of tools and applications used to support multiple payment systems.  </li> <li>Identify potential issues and recommend solutions to eliminate bottleneck in early production stages.</li> </ul> <p>Monte Jones     (972) 734-2708  Page 2</p> <p>ADDITIONAL RELEVANT EXPERIENCE</p> <p>CONVERGYS, Dallas, TX    Solution Order Fulfillment Technician IV Served as Lead Technician in developing, integrating, and testing of the customer IT systems. Ensured timely and accurate shipping of client\u2019s IT system components and resources that included all networking hardware, operating systems, and a variety of computer Blades, Servers, Desktops, and proprietary PCBs. Verified customer order and maintained communication with installer to answer inquiries and/or handle any issues. Ensured complete client satisfaction.</p> <ul> <li>Oversaw the proper handling and fulfillment of client orders assigned.  </li> <li>Reviewed scheduled orders to ensure processing of purchase requests and order placement with selected vendors.  </li> <li>Drove process to ensure proper placement of vendor orders and confirmed delivery to multiple offices.</li> </ul> <p>Test Technician IV Planned, coordinated, and conducted new PCB testing to support the development and integration of new electronic systems. Tracked and logged all system and component test data in the Test and Repair Tracker Database. Reported reoccurring errors to development team and engineers to address product design flaws.  Maintained bench testing equipment and recommended procedural additions to testing processes. Earned promotion from Test Tech II to Test Tech IV for outstanding performance.</p> <ul> <li>Increased department productivity by completing all testing assignments on time and to highest standards.  </li> <li>Drove process to review testing procedures and implement new bench testing process.  </li> <li>Interfaced directly with engineers and client project managers to devise testing strategies on new product designs.  </li> <li>Planned and completed customer acceptance testing, diagnosing system incidents, assisting customer engineers to install and test new system applications and fine-tune systems operations.  </li> <li>Spearheaded both the short- and long-term engineering process from inception through completion.</li> </ul> <p>GARRETT ELECTRONICS, Garland, TX     Lead Technician Provided high-level electronic troubleshooting expertise in testing, repairing, and maintaining IT/electronic systems at the PCB and component level. Coordinated quality controls, tested, and evaluated returned components and supported installation of new systems at customer locations. Read and interpreted design schematics; maintained repair logs and recorded all replaced components and parts.</p> <ul> <li>Implemented strategies to refurbish/test/configure electronic equipment to resolve root cause issues.</li> </ul> <p>EDUCATION Associate of Science (AS) Electrical and Electronics Engineering National Education Center, Irvine, CA</p> <p>CERTIFICATIONS Google IT Automation with Python Actively Pursuing Kubernetes Certification</p>"},{"location":"aws/service_container_cheatsheet/","title":"Service container cheatsheet","text":""},{"location":"aws/service_container_cheatsheet/#study-guide-serverless-container-execution","title":"Study Guide: Serverless Container Execution \ud83d\ude80","text":"<p>Serverless container execution allows developers to run containers without managing servers, enabling scalability, automation, and cost efficiency. Below is a breakdown of key AWS services that support serverless container execution.</p>"},{"location":"aws/service_container_cheatsheet/#1-container-orchestration-amazon-ecs-eks","title":"1\ufe0f\u20e3 Container Orchestration \u2699\ufe0f \u2013 Amazon ECS &amp; EKS","text":"<p>\u2714\ufe0f Amazon Elastic Container Service (ECS) \u2192 Fully managed container orchestration service that simplifies deployment and scaling. \u2714\ufe0f Amazon Elastic Kubernetes Service (EKS) \u2192 Managed Kubernetes service that automates cluster management.  </p> <p>\ud83d\udd0e Study Tip: Learn how ECS and EKS handle auto-scaling, networking, and security for containerized applications.  </p>"},{"location":"aws/service_container_cheatsheet/#2-serverless-containers-aws-fargate","title":"2\ufe0f\u20e3 Serverless Containers \ud83d\ude80 \u2013 AWS Fargate","text":"<p>\u2714\ufe0f AWS Fargate \u2192 Allows you to run containers without managing EC2 instances, handling provisioning and scaling automatically. \u2714\ufe0f Best for: Microservices, batch processing, and event-driven applications.  </p> <p>\ud83d\udd0e Study Tip: Understand how Fargate integrates with ECS and EKS for seamless container execution.  </p>"},{"location":"aws/service_container_cheatsheet/#3-container-image-storage-amazon-ecr","title":"3\ufe0f\u20e3 Container Image Storage \ud83d\uddc4\ufe0f \u2013 Amazon ECR","text":"<p>\u2714\ufe0f Amazon Elastic Container Registry (ECR) \u2192 Secure, scalable storage for container images. \u2714\ufe0f Features:    - Automated image scanning for vulnerabilities.    - Cross-region replication for global deployments.    - Lifecycle policies to optimize storage costs.  </p> <p>\ud83d\udd0e Study Tip: Learn how to push, pull, and manage Docker images in ECR.  </p>"},{"location":"aws/service_container_cheatsheet/#4-kubernetes-management-amazon-eks","title":"4\ufe0f\u20e3 Kubernetes Management \ud83e\udde9 \u2013 Amazon EKS","text":"<p>\u2714\ufe0f Amazon EKS \u2192 Fully managed Kubernetes service that simplifies cluster operations. \u2714\ufe0f Features:    - Auto-scaling for workloads.    - Integration with AWS networking &amp; security.    - Multi-region support for high availability.  </p> <p>\ud83d\udd0e Study Tip: Explore EKS Auto Mode, which automates node provisioning and scaling.  </p>"},{"location":"aws/service_container_cheatsheet/#5-managed-containers-amazon-ecs","title":"5\ufe0f\u20e3 Managed Containers \ud83d\udee0\ufe0f \u2013 Amazon ECS","text":"<p>\u2714\ufe0f Amazon ECS \u2192 Fully managed container service that integrates deeply with AWS. \u2714\ufe0f Best for:    - Web applications with auto-scaling.    - Batch processing workloads.    - AI/ML model training using containers.  </p> <p>\ud83d\udd0e Study Tip: Compare ECS vs EKS vs Fargate to understand when to use each service.  </p>"},{"location":"aws/service_container_cheatsheet/#final-study-tips","title":"Final Study Tips","text":"<p>\u2705 Learn how AWS Fargate eliminates infrastructure management for containers. \u2705 Understand IAM roles &amp; security best practices for container execution. \u2705 Explore cost optimization strategies for running containers efficiently.  </p> <p>You can explore more details here.</p>"},{"location":"aws/cloud-practitioneer/storage_cheetsheet/","title":"Study guide for AWS storage","text":"<p>Here\u2019s a study guide covering key AWS storage services to help you understand and compare them.</p>"},{"location":"aws/cloud-practitioneer/storage_cheetsheet/#overview","title":"Overview","text":"<p>Here are the AWS services that relates to storage.:</p> <ul> <li>Object Storage \ud83d\uddc2\ufe0f: Amazon S3 is designed for storing and retrieving any amount of data from anywhere, making it ideal for web applications, backups, and data lakes.</li> <li>Block Storage \ud83d\udcbd: Amazon EBS provides persistent block-level storage for EC2 instances, functioning like a traditional hard drive.</li> <li>Long-Term Archiving \ud83d\udce6: Amazon S3 Glacier offers low-cost storage optimized for data archiving and long-term backup.</li> <li>File Storage \ud83d\uddc3\ufe0f: Amazon EFS provides shared file storage, perfect for applications requiring a centralized file system.</li> <li>Scalable Data Storage \ud83d\ude80: Amazon S3 allows for scalable, secure storage that can handle growing volumes of data seamlessly.</li> </ul>"},{"location":"aws/cloud-practitioneer/storage_cheetsheet/#aws-storage-services-study-guide","title":"AWS Storage Services Study Guide","text":""},{"location":"aws/cloud-practitioneer/storage_cheetsheet/#1-object-storage-amazon-s3","title":"1\ufe0f\u20e3 Object Storage \ud83d\uddc2\ufe0f \u2013 Amazon S3","text":"<p>\u2714\ufe0f What it is: Scalable, secure cloud storage for any type of data. \u2714\ufe0f Use cases: Web applications, backups, big data analytics, media storage. \u2714\ufe0f Key features:    - Stores files as objects in buckets.    - Supports versioning, encryption, and lifecycle policies.    - Highly durable &amp; available across regions.    - Integrates with AWS services like CloudFront (CDN).  </p> <p>\ud83d\udd0e Study Tip: Learn how to upload, manage permissions, and use storage classes like S3 Standard, Intelligent-Tiering, Glacier for cost optimization.  </p>"},{"location":"aws/cloud-practitioneer/storage_cheetsheet/#2-block-storage-amazon-ebs","title":"2\ufe0f\u20e3 Block Storage \ud83d\udcbd \u2013 Amazon EBS","text":"<p>\u2714\ufe0f What it is: Persistent storage for EC2 instances, similar to a hard drive. \u2714\ufe0f Use cases: Databases, high-performance workloads, boot volumes for EC2. \u2714\ufe0f Key features:    - Attached to EC2 instances.    - Supports snapshots for backup &amp; recovery.    - Options for SSD (GP3, IO1, IO2) &amp; HDD (ST1, SC1) performance.  </p> <p>\ud83d\udd0e Study Tip: Understand volume types, how to create EBS volumes, and how they scale for different workloads.  </p>"},{"location":"aws/cloud-practitioneer/storage_cheetsheet/#3-long-term-archiving-amazon-s3-glacier","title":"3\ufe0f\u20e3 Long-Term Archiving \ud83d\udce6 \u2013 Amazon S3 Glacier","text":"<p>\u2714\ufe0f What it is: Low-cost storage for long-term backups &amp; compliance data. \u2714\ufe0f Use cases: Regulatory archives, medical records, financial backups. \u2714\ufe0f Key features:    - Retrieval options: Expedited, Standard, Bulk (time varies).    - Designed for cold storage (rarely accessed data).    - Data lifecycle rules automate archiving.  </p> <p>\ud83d\udd0e Study Tip: Compare Glacier vs S3 Standard storage classes for pricing and retrieval speeds.  </p>"},{"location":"aws/cloud-practitioneer/storage_cheetsheet/#4-file-storage-amazon-efs","title":"4\ufe0f\u20e3 File Storage \ud83d\uddc3\ufe0f \u2013 Amazon EFS","text":"<p>\u2714\ufe0f What it is: Managed shared file storage, accessible across multiple instances. \u2714\ufe0f Use cases: Web applications, machine learning models, shared team files. \u2714\ufe0f Key features:    - Elastic storage growth (scales automatically).    - Supports NFS protocols for file sharing.    - Two storage classes: Standard &amp; Infrequent Access (IA) for cost savings.  </p> <p>\ud83d\udd0e Study Tip: Learn how to mount EFS to EC2 and compare EFS vs EBS for storage needs.  </p> <p>4\ufe0f\u20e3 Scalable Data Storage \ud83d\ude80 \u2013 Amazon S3 \u2714\ufe0f What it is: Scalable, secure, cost-effective storage that adapts to business needs. \u2714\ufe0f Use cases: High-growth startups, enterprises managing large datasets. \u2714\ufe0f Key features:    - Lifecycle management automates cost savings.    - Multi-region replication ensures redundancy.    - Integrates with AWS analytics &amp; AI services for seamless workflows.  </p> <p>\ud83d\udd0e Study Tip: Explore S3 Intelligent-Tiering and how it automatically moves data between storage classes to optimize costs.  </p>"},{"location":"aws/cloud-practitioneer/storage_cheetsheet/#amazon-file-cache-study-guide","title":"Amazon File Cache \u2013 Study Guide \ud83d\ude80","text":""},{"location":"aws/cloud-practitioneer/storage_cheetsheet/#overview_1","title":"Overview","text":"<p>Amazon File Cache is a high-speed, fully managed cache that accelerates file-based workloads by providing quick access to data stored across multiple sources, including Amazon S3, on-premises storage, and AWS file systems.  </p>"},{"location":"aws/cloud-practitioneer/storage_cheetsheet/#key-features","title":"Key Features","text":"<p>\u2714\ufe0f High Throughput &amp; Low Latency \u2192 Delivers sub-millisecond access for large-scale applications. \u2714\ufe0f Unified Namespace \u2192 Aggregates multiple data sources into a single view. \u2714\ufe0f Automatic Caching \u2192 Frequently accessed files are cached for faster retrieval. \u2714\ufe0f POSIX-Compliant \u2192 Seamlessly integrates with Linux-based applications. \u2714\ufe0f Scalability \u2192 Dynamically expands to handle growing datasets.  </p>"},{"location":"aws/cloud-practitioneer/storage_cheetsheet/#use-cases","title":"Use Cases","text":"<p>\ud83d\udd39 High-Performance Computing (HPC) \u2192 Supports workloads like genomics, seismic analysis, and simulations. \ud83d\udd39 Machine Learning (ML) Training \u2192 Accelerates large-scale ML projects by providing rapid data access. \ud83d\udd39 Media &amp; Entertainment \u2192 Speeds up rendering and data processing for visual effects and animations. \ud83d\udd39 Big Data Analytics \u2192 Enhances performance of data processing pipelines.  </p>"},{"location":"aws/cloud-practitioneer/storage_cheetsheet/#comparison-with-other-aws-storage-services","title":"Comparison with Other AWS Storage Services","text":"Storage Service Best For Data Retrieval Speed Integration Amazon File Cache HPC, ML, media workloads Sub-millisecond POSIX-compatible, connects to S3 &amp; FSx Amazon S3 General object storage Varies (depends on tier) Works with many AWS services Amazon EFS Shared file storage Low latency NFS-based, ideal for Linux apps Amazon FSx for Lustre High-performance file system Sub-millisecond HPC and large-scale file processing"},{"location":"aws/cloud-practitioneer/storage_cheetsheet/#study-tips","title":"Study Tips","text":"<p>\u2705 Learn how to configure and mount Amazon File Cache to Linux instances. \u2705 Understand performance tuning to optimize cache speed. \u2705 Explore how it integrates with Amazon S3 and FSx for seamless file access. \u2705 Review pricing models for cost-efficient caching solutions.  </p> <p>Want me to create practice questions for your study? \ud83d\ude80 You can explore more here.</p>"},{"location":"aws/cloud-practitioneer/storage_cheetsheet/#final-study-tips","title":"Final Study Tips","text":"<p>\u2705 Compare S3 vs EBS vs EFS \u2013 Know when to use each. \u2705 Learn IAM permissions &amp; security for storage buckets &amp; volumes. \u2705 Practice creating, managing, and optimizing AWS storage solutions.</p>"},{"location":"docker/Dockerfile_node_example/","title":"Dockerfile node example","text":"<p>To Dockerize the Node.js app, you need to create a Dockerfile under <code>/node_app</code> and then build and run the container.  Follow the below</p> <p>This assumes you have a working node application located at /node_app/</p>"},{"location":"docker/Dockerfile_node_example/#step-1-create-the-dockerfile","title":"Step 1: Create the Dockerfile","text":"<p>Navigate to the <code>/node_app/</code> directory:</p> <pre><code>cd /node_app\n</code></pre> <p>Create the <code>Dockerfile</code>:</p> <pre><code>nano Dockerfile\n</code></pre> <p>Add the following content:</p> <pre><code># Use a Node image as the base\nFROM node:latest\n\n# Set the working directory\nWORKDIR /node_app\n\n# Copy package.json to the container\nCOPY package.json ./\n\n# Install dependencies\nRUN npm install\n\n# Copy the rest of the application files\nCOPY . .\n\n# Expose port 5001\nEXPOSE 5001\n\n# Start the application using server.js\nCMD [\"node\", \"server.js\"]\n</code></pre> <p>Save and exit.</p>"},{"location":"docker/Dockerfile_node_example/#step-2-build-the-docker-image","title":"Step 2: Build the Docker Image","text":"<p>Run the following command to build the Docker image:</p> <pre><code>docker build -t nautilus/node-web-app .\n</code></pre>"},{"location":"docker/Dockerfile_node_example/#step-3-run-the-container","title":"Step 3: Run the Container","text":"<p>Now, create and start the container using the required name and port mapping:</p> <pre><code>docker run -d --name nodeapp_nautilus -p 8094:5001 nautilus/node-web-app\n</code></pre> <ul> <li><code>-d</code>: Runs the container in detached mode.</li> <li><code>--name nodeapp_nautilus</code>: Sets the container name.</li> <li><code>-p 8094:5001</code>: Maps host port 8094 to container port 5001.</li> </ul>"},{"location":"docker/Dockerfile_node_example/#step-4-verify-the-running-container","title":"Step 4: Verify the Running Container","text":"<p>Check if the container is running:</p> <pre><code>docker ps\n</code></pre> <p>Confirm that the logs show no errors:</p> <pre><code>docker logs nodeapp_nautilus\n</code></pre>"},{"location":"docker/Dockerfile_node_example/#step-5-test-the-deployment","title":"Step 5: Test the Deployment","text":"<p>Run the curl command to verify that the app is accessible:</p> <pre><code>curl http://localhost:8094\n</code></pre> <p>If the response comes back correctly, the app is running successfully! \ud83d\ude80 Let me know if you need further tweaks or troubleshooting.</p>"},{"location":"docker/Dockerfile_python_example/","title":"Dockerize the Python app and deploy it on appserver, follow these steps:","text":"<p>This assumes you have a python app under <code>/python_app/</code></p>"},{"location":"docker/Dockerfile_python_example/#step-1-create-the-dockerfile","title":"Step 1: Create the Dockerfile","text":"<p>Navigate to the <code>/python_app/</code> directory:</p> <pre><code>cd /python_app\n</code></pre> <p>Create the <code>Dockerfile</code>:</p> <pre><code>nano Dockerfile\n</code></pre> <p>Add the following content:</p> <pre><code># Use a Python image as the base\nFROM python:latest\n\n# Set the working directory\nWORKDIR /python_app\n\n# Copy the dependencies file into the container\nCOPY src/requirements.txt .\n\n# Install dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the application files into the container\nCOPY src/ .\n\n# Expose port 8087\nEXPOSE 8087\n\n# Run the Python application\nCMD [\"python\", \"server.py\"]\n</code></pre> <p>Save and exit.</p>"},{"location":"docker/Dockerfile_python_example/#step-2-build-the-docker-image","title":"Step 2: Build the Docker Image","text":"<p>Run the following command to build the Docker image:</p> <pre><code>docker build -t nautilus/python-app .\n</code></pre>"},{"location":"docker/Dockerfile_python_example/#step-3-run-the-container","title":"Step 3: Run the Container","text":"<p>Now, create and start the container with the required port mapping:</p> <pre><code>docker run -d --name pythonapp_nautilus -p 8099:8087 nautilus/python-app\n</code></pre> <ul> <li><code>-d</code>: Runs the container in detached mode.</li> <li><code>--name pythonapp_nautilus</code>: Sets the container name.</li> <li><code>-p 8099:8087</code>: Maps host port 8099 to container port 8087.</li> </ul>"},{"location":"docker/Dockerfile_python_example/#step-4-verify-the-running-container","title":"Step 4: Verify the Running Container","text":"<p>Check if the container is running:</p> <pre><code>docker ps\n</code></pre> <p>Confirm that logs show no errors:</p> <pre><code>docker logs pythonapp_nautilus\n</code></pre>"},{"location":"docker/Dockerfile_python_example/#step-5-test-the-deployment","title":"Step 5: Test the Deployment","text":"<p>Run the curl command to verify the app:</p> <pre><code>curl http://localhost:8099/\n</code></pre> <p>If you receive a response, the app is successfully deployed! \ud83d\ude80 Let me know if you need adjustments or troubleshooting.</p>"},{"location":"docker/compose_example/","title":"Compose example","text":"<p>Setting up the environment based on those guidelines requires a properly defined <code>docker-compose.yml</code> file. Below is an example of how you can structure it:</p> <pre><code>services:\n  webserver:\n    image: httpd:latest\n    container_name: httpd\n    ports:\n      - \"3003:80\"\n    volumes:\n      - \"/opt/finance:/usr/local/apache2/htdocs\"\n</code></pre>"},{"location":"docker/compose_example/#steps-to-implement","title":"Steps to implement","text":"<ol> <li>Create the Docker Compose file: </li> <li> <p>Navigate to the <code>/opt/docker/</code> directory:</p> <p><code>bash  cd /opt/docker/</code></p> </li> <li> <p>Create the <code>docker-compose.yml</code> file using a text editor like <code>nano</code>:</p> <p><code>bash  nano docker-compose.yml</code></p> </li> <li> <p>Paste the YAML configuration and save the file.</p> </li> <li> <p>Deploy the container: </p> </li> <li> <p>Run the following command to start the container:</p> <p><code>bash  docker compose up -d</code></p> </li> <li> <p>Verify the deployment: </p> </li> <li> <p>Check if the container is running:</p> <p><code>bash  docker ps</code></p> </li> <li> <p>Ensure the port mapping is correct:</p> <p><code>bash  docker-compose config</code></p> </li> <li> <p>Test accessibility by navigating to <code>http://&lt;docker_host_ip&gt;:3003</code> in a browser.</p> </li> </ol> <p>Let me know if you need any adjustments or troubleshooting!</p>"},{"location":"docker/compose_php_mariadb_example/","title":"Compose php mariadb example","text":"<p>To set up the required containerized stack using Docker Compose, you need to create the specified <code>docker-compose.yml</code> file at <code>/opt/dba/docker-compose.yml</code>. Below is how you can structure it:</p> <pre><code>services:\n  web:\n    image: php:apache\n    container_name: php_web\n    ports:\n      - \"8089:80\"\n    volumes:\n      - \"/var/www/html:/var/www/html\"\n\n  db:\n    image: mariadb:latest\n    container_name: mysql_web\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - \"/var/lib/mysql:/var/lib/mysql\"\n    environment:\n      MYSQL_DATABASE: database_web\n      MYSQL_USER: php_web_user\n      MYSQL_PASSWORD: C0mplexP@ssw0rd!\n      MYSQL_ROOT_PASSWORD: R00tP@ssword456 \n</code></pre>"},{"location":"docker/compose_php_mariadb_example/#steps-to-deploy","title":"Steps to Deploy:","text":"<ol> <li> <p>Navigate to the directory: <code>bash    cd /opt/dba/</code></p> </li> <li> <p>Create the <code>docker-compose.yml</code> file: <code>bash    nano docker-compose.yml</code></p> </li> <li> <p>Paste the YAML configuration above and save it.</p> </li> <li> <p>Run Docker Compose: <code>bash    docker-compose up -d</code></p> </li> <li> <p>Verify the Containers: <code>bash    docker ps</code></p> </li> <li> <p>Test the Deployment: <code>bash    curl &lt;server-ip or hostname&gt;:8089/</code></p> </li> </ol> <p>Once deployed, the app should be accessible via port <code>8089</code>. Let me know if you need any tweaks! \ud83d\ude80</p>"},{"location":"docker/create_image_from_container/","title":"Create image from container","text":"<p>Got it! To create the requested Docker image media:nautilus from the running container ubuntu_latest on Application Server 2, follow these steps:</p>"},{"location":"docker/create_image_from_container/#steps-to-commit-the-container-as-an-image","title":"Steps to Commit the Container as an Image","text":"<ol> <li>Create a new image from the running container:    Run the following command to commit the container's current state as an image:</li> </ol> <p><code>bash    docker commit ubuntu_latest media:nautilus</code></p> <ol> <li>Verify the newly created image:    To confirm that the image was created successfully, check the list of available Docker images:</li> </ol> <p><code>bash    docker images | grep media</code></p> <ol> <li>Push the image to a registry (if needed):    If the developer wants to share the image across different servers or teams, it can be tagged and pushed to a Docker registry:</li> </ol> <p><code>bash    docker tag media:nautilus your_registry/media:nautilus    docker push your_registry/media:nautilus</code></p> <p>This ensures the developer\u2019s container changes are safely backed up as a new image. Let me know if you need any further assistance! \ud83d\ude80</p>"},{"location":"docker/install_apache_in_container/","title":"Install apache in container","text":"<p>To install Apache2 within a running Docker container, you'll typically access the container's shell, install the package, and then restart the container. This approach is not ideal for production environments, as changes made inside a container won't persist unless you commit the changes to a new image. [1, 2, 3] Here's a step-by-step guide:  1. Get the Container ID: [4]  </p> <p>\u2022 Use docker ps to list all running containers and note down the ID or name of the container you want to modify. [4]  </p> <ol> <li>Access the Container's Shell: [3]  </li> </ol> <p>\u2022 Use docker exec -it &lt;container_id&gt; bash to enter a bash shell within the container. Replace &lt;container_id&gt; with the actual ID you found in step 1. [3]  </p> <ol> <li>Install Apache2: [2]  </li> </ol> <p>\u2022 Inside the container, use the appropriate package manager for your container's base image (e.g., apt-get install apache2 -y for Ubuntu-based images). [2] \u2022 You might also need to install other essential tools like net-tools. [1]  </p> <ol> <li>Restart the Container (Optional, but recommended): [4]  </li> </ol> <p>\u2022 If you need to ensure the new package is properly loaded, you can restart the container using docker restart &lt;container_id&gt;. [4]  </p> <ol> <li>(Optional) Commit Changes: [3]  </li> </ol> <p>\u2022 If you want to create a new image based on the modified container, you can use docker commit &lt;container_id&gt; &lt;new_image_name&gt;. [3]  </p> <p>Important Considerations: [3]  </p> <p>\u2022 Container Persistence: Changes made within a running container are generally not persistent across container restarts, unless you commit them to a new image. [3] \u2022 Best Practices: For production deployments, it's generally recommended to build a new Docker image that includes Apache2 from the start using a Dockerfile. [5, 6] \u2022 Networking: If you're running the web server on a specific port, ensure you're mapping the correct ports between the host and the container. [4]  </p> <p>To complete the pending configuration on the cloud container running on appserver, follow these steps:</p>"},{"location":"docker/install_apache_in_container/#1-install-apache2-in-the-container","title":"1. Install Apache2 in the Container","text":"<p>First, access the container and install Apache using <code>apt</code>:</p> <p><code>bash    docker exec -it cloud bash    apt update &amp;&amp; apt install -y apache2</code></p>"},{"location":"docker/install_apache_in_container/#2-configure-apache-to-listen-on-port-8083","title":"2. Configure Apache to Listen on Port 8083","text":"<p>Modify the Apache ports configuration file:</p> <p><code>bash    sed -i 's/Listen 80/Listen 8083/' /etc/apache2/ports.conf    sed -i 's/&lt;VirtualHost *:80&gt;/&lt;VirtualHost *:8083&gt;/' /etc/apache2/sites-enabled/000-default.conf</code></p> <p>Restart Apache to apply the changes:</p> <p><code>bash    systemctl restart apache2</code></p>"},{"location":"docker/install_apache_in_container/#3-ensure-apache-is-running-keep-the-container-alive","title":"3. Ensure Apache is Running &amp; Keep the Container Alive","text":"<p>Check if Apache is running inside the container:</p> <p><code>bash    systemctl status apache2</code></p> <p>To ensure the container stays running, detach from the interactive session with <code>Ctrl + P + Q</code> or run the container with a persistent process.</p> <p>This ensures the cloud container is properly configured and running with the required setup. \ud83d\ude80 Let me know if you need any modifications!\u001a</p> <p>docker update --restart unless-stopped cloud</p>"},{"location":"docker/map_port/","title":"Map Port","text":"<p>To complete this task, follow these steps:</p>"},{"location":"docker/map_port/#1-pull-the-nginxstable-docker-image","title":"1. Pull the <code>nginx:stable</code> Docker image","text":"<pre><code>docker pull nginx:stable\n</code></pre> <p>This will download the stable version of the Nginx image.</p>"},{"location":"docker/map_port/#2-create-a-container-named-media-from-the-pulled-image","title":"2. Create a container named <code>media</code> from the pulled image","text":"<pre><code>docker run -d --name media -p 3004:80 nginx:stable\n</code></pre> <ul> <li><code>-d</code> \u2192 Runs the container in detached mode (keeps it running in the background).</li> <li><code>--name media</code> \u2192 Names the container <code>media</code>.</li> <li><code>-p 3004:80</code> \u2192 Maps host port <code>3004</code> to container port <code>80</code></li> <li><code>nginx:stable</code> \u2192 Specifies the image to use.</li> </ul>"},{"location":"docker/map_port/#3-verify-the-container-is-running","title":"3. Verify the container is running","text":"<pre><code>docker ps\n</code></pre> <p>This will show all active containers\u2014confirm that <code>media</code> is listed and running.</p>"},{"location":"docker/map_port/#4-test-the-nginx-container","title":"4. Test the Nginx container","text":"<p>Now, check if Nginx is working by opening a browser or using <code>curl</code>:</p> <pre><code>curl http://localhost:3004\n</code></pre> <p>If Nginx is running properly, it should return the default welcome page.</p> <p>Everything should be set up now! \ud83d\ude80 Let me know if you need further help. \ud83d\ude0a</p>"},{"location":"docker/network_setup/","title":"Create Network Interface","text":"<p>To accomplish this task, the DevOps team member should use the <code>docker network create</code> command with the required parameters. Here's how to create the Docker network named <code>news</code> with macvlan drivers, subnet, and IP range as specified:</p>"},{"location":"docker/network_setup/#step-by-step-command","title":"Step-by-Step Command","text":"<pre><code>docker network create \\\n  --driver macvlan \\\n  --subnet=172.168.0.0/24 \\\n  --ip-range=172.168.0.0/24 \\\n  --gateway=172.168.0.1 \\\n  --opt parent=&lt;network_interface&gt; \\\n  news\n</code></pre>"},{"location":"docker/network_setup/#explanation-of-parameters","title":"Explanation of Parameters","text":"<ul> <li><code>--driver macvlan</code> \u2192 Configures the network to use macvlan.</li> <li><code>--subnet=172.168.0.0/24</code> \u2192 Defines the subnet for the network.</li> <li><code>--ip-range=172.168.0.0/24</code> \u2192 Restricts IP addresses to a specific range.</li> <li><code>--gateway=172.168.0.1</code> \u2192 Sets the gateway IP (modify as necessary).</li> <li><code>--opt parent=&lt;network_interface&gt;</code> \u2192 Specifies the host network interface e.g., <code>eth0</code> ).</li> <li><code>news</code> \u2192 Assigns the network name.</li> </ul>"},{"location":"docker/network_setup/#important-notes","title":"Important Notes","text":"<p>\u2714\ufe0f Ensure that the host system has macvlan support enabled. \u2714\ufe0f Replace <code>&lt;network_interface&gt;</code> with the correct network adapter on the App Server. \u2714\ufe0f Verify network settings using <code>docker network inspect news</code>.</p> <p>Once this network is created, it will be available for containers to use when deployed.</p>"},{"location":"docker/private_registry/","title":"private registry","text":"<ol> <li>login to registry</li> </ol> <pre><code>docker login private-registry.io\n</code></pre> <ol> <li>run the app</li> </ol> <pre><code>docker run private-registry.io/interal-app\n</code></pre> <ol> <li>Deploy Private Registry</li> </ol> <pre><code>docker run -d -p 5000:5000 --restart always --name registry registry:2\n</code></pre> <ol> <li>create image</li> </ol> <pre><code>docker image tag my-image localhost:5000/my-image\n</code></pre> <ol> <li>pull image</li> </ol> <pre><code>docker pull localhost:5000/my-image\n</code></pre> <ol> <li>push image</li> </ol> <pre><code>docker push localhost:5000/my-image\n</code></pre> <ol> <li>verify image</li> </ol> <pre><code>curl -X GET localhost:5000/v2/_catalog\n</code></pre>"},{"location":"docker/pull_retag/","title":"pull and retag an image","text":"<ol> <li>Pull the BusyBox image    On appserver in company-name, run the following command to pull the BusyBox image with <code>musl</code>:</li> </ol> <p><code>bash    docker pull busybox:musl</code></p> <ol> <li>Retag (Create a New Tag)    Once the image is pulled, you can re-tag it as <code>busybox:media</code> using:</li> </ol> <p><code>bash    docker tag busybox:musl busybox:media</code></p> <ol> <li>Verify the Image Tagging    To confirm the changes, list the images and check for the new tag:</li> </ol> <p><code>bash    docker images | grep busybox</code></p> <p>This should help you achieve the required task efficiently! If you need any further assistance, feel free to ask. \ud83d\ude80 `</p>"},{"location":"docker/run_Dockerfile/","title":"Run Dockerfile","text":"<p>If you want to run a container using a Dockerfile, you'll need to follow these steps</p>"},{"location":"docker/run_Dockerfile/#steps-to-run-a-container-from-a-dockerfile","title":"Steps to Run a Container from a Dockerfile","text":"<ol> <li>Create a Dockerfile </li> <li>Navigate to the directory where you want to create the Dockerfile:      <code>bash      cd /opt/docker/</code></li> <li>Create a new file named <code>Dockerfile</code>:      <code>bash      nano Dockerfile</code>:</li> <li>Add the following content to the Dockerfile:      <code>dockerfile      FROM httpd:latest      COPY . /usr/local/apache2/htdocs      EXPOSE 80</code></li> <li> <p>Save and exit.</p> </li> <li> <p>Build the Docker Image </p> </li> <li> <p>Run the following command to build the image:      <code>bash      docker build -t my-httpd .</code></p> </li> <li> <p>Run the Container </p> </li> <li>Start the container with the required parameters:      <code>bash      docker run -d --name httpd -p 3003:80 -v /opt/finance:/usr/local/apache2/htdocs my-httpd</code></li> <li> <p>This command:</p> <ul> <li>Runs the container in detached mode (<code>-d</code>).</li> <li>Names the container <code>httpd</code>.</li> <li>Maps port <code>3003</code> on the host to <code>80</code> inside the container.</li> <li>Mounts the <code>/opt/finance</code> directory from the host to <code>/usr/local/apache2/htdocs</code> inside the container.</li> </ul> </li> <li> <p>Verify the Container is Running </p> </li> <li>Check the running containers:      <code>bash      docker ps</code></li> <li>Ensure that port mapping is correct:      <code>bash      docker inspect httpd | grep -i \"3003\"</code></li> </ol> <p>Now your <code>httpd</code> container should be up and running based on the Dockerfile! Let me know if you need any modifications or troubleshooting assistance.</p>"},{"location":"docker/run_command_line/","title":"deploy mysql","text":"<p>You can deploy a MySQL database using the mysql:5.6 image, naming the container mysql-db, and attaching it to the wp-mysql-network. You'll also set the root password using the environment variable MYSQL_ROOT_PASSWORD. Here's the command to do that:</p> <pre><code>docker run --name mysql-db --network wp-mysql-network \\\n  -e MYSQL_ROOT_PASSWORD=db_pass123 \\\n  -d mysql:5.6\n</code></pre> <p>Explanation:</p> <ul> <li>--name mysql-db \u2192 Names the container mysql-db.</li> <li>--network wp-mysql-network \u2192 Connects it to the newly created network.</li> <li>-e MYSQL_ROOT_PASSWORD=db_pass123 \u2192 Sets the root password.</li> <li>-d mysql:5.6 \u2192 Runs the container in detached mode using MySQL version 5.6.</li> </ul> <p>To verify that your container is running, you can use:</p>"},{"location":"docker/save_load_transfer_image/","title":"Save load and transfer image","text":""},{"location":"docker/save_load_transfer_image/#step-1-save-the-docker-image-on-appserver","title":"Step 1: Save the Docker Image on appserver","text":"<p>Run the following command to save the <code>blog:datacenter</code> image into an archive (<code>blog_datacenter.tar</code>):</p> <pre><code>docker save -o /tmp/blog_datacenter.tar blog:datacenter\n</code></pre> <p>This command creates a tar archive of the image.</p>"},{"location":"docker/save_load_transfer_image/#step-2-transfer-the-archive-to-app-server-3","title":"Step 2: Transfer the Archive to App Server 3","text":"<p>Use <code>scp</code> (or <code>rsync</code>) to transfer the file to App Server 3:</p> <pre><code>scp /tmp/blog_datacenter.tar user@&lt;AppServer3_IP&gt;:/tmp/\n</code></pre> <p>Replace <code>&lt;AppServer3_IP&gt;</code> with the actual IP address of App Server 3, and ensure SSH access is configured.</p>"},{"location":"docker/save_load_transfer_image/#step-3-load-the-image-on-app-server-3","title":"Step 3: Load the Image on App Server 3","text":"<p>Once the file is available on App Server 3, load the image using:</p> <pre><code>docker load -i /tmp/blog_datacenter.tar\n</code></pre> <p>After loading, verify the image exists using:</p> <pre><code>docker images | grep blog\n</code></pre> <p>It should show:</p> <pre><code>blog    datacenter   &lt;IMAGE_ID&gt;   &lt;SIZE&gt;\n</code></pre>"},{"location":"docker/save_load_transfer_image/#bonus-ensure-docker-service-is-running","title":"Bonus: Ensure Docker Service is Running","text":"<p>If Docker is not running, start it using:</p> <pre><code>systemctl start docker\n</code></pre> <p>or, for systems using <code>service</code>:</p> <pre><code>service docker start\n</code></pre> <p>Everything should now be set up! \ud83d\ude80 Let me know if you need any further assistance. \ud83d\ude0a</p>"},{"location":"docker/update_permissions/","title":"Update permissions","text":"<p>To grant kirsty the ability to run Docker commands without <code>sudo</code>, follow these steps:</p> <ol> <li>Add the User to the Docker Group    Run the following command on appserver to add <code>kirsty</code> to the <code>docker</code> group:</li> </ol> <p><code>bash    sudo usermod -aG docker kirsty</code></p> <ol> <li> <p>Apply Group Changes    The user needs to log out and log back in for the changes to take effect. You can prompt kirsty to do so or restart the system.</p> </li> <li> <p>Verify Access    Once logged back in, check if kirsty can run Docker commands without <code>sudo</code>:</p> </li> </ol> <p><code>bash    docker ps</code></p> <p>If the command runs successfully without requiring <code>sudo</code>, the setup is complete. If you run into any issues, let me know\u2014I\u2019ve got your back! \ud83d\ude80</p>"},{"location":"docker/volumes/","title":"Docker Volumes","text":"<p>To accomplish this task, the team member can follow these steps:</p>"},{"location":"docker/volumes/#1-pull-the-latest-nginx-image","title":"1. Pull the latest Nginx image","text":"<pre><code>docker pull nginx:latest\n</code></pre> <p>This will download the latest version of the Nginx image, but other versions will work as well.</p>"},{"location":"docker/volumes/#2-create-a-container-named-news-from-the-pulled-image","title":"2. Create a container named <code>news</code> from the pulled image:","text":"<pre><code>docker run -d --name news -v /opt/sysops:/usr/src/ nginx\n</code></pre> <ul> <li><code>-d</code> \u2192 Runs the container in detached mode (keeps it running).</li> <li><code>--name news</code> \u2192 Names the container news.</li> <li><code>-v /opt/sysops:/usr/src/</code> \u2192 Maps the host directory <code>/opt/sysops</code> to <code>/usr/src/</code> inside the container.</li> </ul>"},{"location":"docker/volumes/#3-copy-sampletxt-from-tmp-to-optsysops","title":"3. Copy <code>sample.txt</code> from <code>/tmp</code> to <code>/opt/sysops</code>","text":"<pre><code>cp /tmp/sample.txt /opt/sysops/\n</code></pre> <p>This ensures the file is inside the mounted volume so it can be accessed by the container.</p>"},{"location":"docker/volumes/#4-verify-container-is-running","title":"4. Verify container is running","text":"<pre><code>docker ps\n</code></pre> <p>This lists all running containers\u2014confirm that <code>news</code> is active.</p>"},{"location":"docker/volumes/#5-optional-check-files-inside-the-container","title":"5. (Optional) Check files inside the container","text":"<p>If you want to confirm the file is accessible within the container:</p> <pre><code>docker exec -it news ls -l /usr/src/\n</code></pre> <p>This should show the <code>sample.txt</code> file inside the container.</p> <p>Everything should now be set up! \ud83d\ude80 Let me know if you need further assistance. \ud83d\ude0a</p>"},{"location":"linux/add_response_headers_in_apache/","title":"add response headers","text":"<p>To harden the Apache web server on appserver, follow these steps:</p>"},{"location":"linux/add_response_headers_in_apache/#1-install-apache-httpd-and-configure-port-6400","title":"1. Install Apache (<code>httpd</code>) and Configure Port 6400","text":"<pre><code>sudo yum install httpd -y\nsudo sed -i 's/^Listen 80/Listen 6400/' /etc/httpd/conf/httpd.conf\nsudo systemctl start httpd\nsudo systemctl enable httpd\n</code></pre> <p>This installs Apache, updates the configuration to listen on port 6400, and ensures the service starts on boot.</p>"},{"location":"linux/add_response_headers_in_apache/#2-create-indexhtml","title":"2. Create <code>index.html</code>","text":"<pre><code>echo \"Welcome to the mycorp Industries!\" | sudo tee /var/www/html/index.html\n</code></pre> <p>This creates the required index.html file.</p>"},{"location":"linux/add_response_headers_in_apache/#3-enable-security-headers","title":"3. Enable Security Headers","text":"<p>Edit the Apache configuration file:</p> <pre><code>sudo nano /etc/httpd/conf/httpd.conf\n</code></pre> <p>Add the following lines inside the <code>&lt;VirtualHost&gt;</code> block or globally:</p> <pre><code>Header set X-XSS-Protection \"1; mode=block\"\nHeader always set X-Frame-Options \"SAMEORIGIN\"\nHeader set X-Content-Type-Options \"nosniff\"\n</code></pre> <p>Save and exit.</p>"},{"location":"linux/add_response_headers_in_apache/#4-restart-apache","title":"4. Restart Apache","text":"<pre><code>sudo systemctl restart httpd\n</code></pre>"},{"location":"linux/add_response_headers_in_apache/#5-test-with-curl","title":"5. Test with <code>curl</code>","text":"<p>Run:</p> <pre><code>curl -I http://localhost:6400\n</code></pre> <p>You should see the headers in the response.</p> <p>For more details, check out this guide or this tutorial. Let me know if you need further customization! \ud83d\ude80</p>"},{"location":"linux/apache_rotate_logs/","title":"Rotate Apache Logs","text":"<p>To set up log rotation for Apache (<code>httpd</code>) on all app servers in company-name Datacenter, follow these steps:</p>"},{"location":"linux/apache_rotate_logs/#1-install-apache-httpd","title":"1. Install Apache (<code>httpd</code>)","text":"<p>Run the following command on each app server:</p> <pre><code>sudo yum install httpd -y\nsudo systemctl start httpd\nsudo systemctl enable httpd\n</code></pre> <p>This installs and starts Apache, ensuring it runs on boot.</p>"},{"location":"linux/apache_rotate_logs/#2-configure-log-rotation-for-apache","title":"2. Configure Log Rotation for Apache","text":"<p>Edit or create a logrotate configuration file for Apache:</p> <pre><code>sudo nano /etc/logrotate.d/httpd\n</code></pre> <p>Add the following configuration:</p> <pre><code>/var/log/httpd/*.log {\n    monthly\n    rotate 3\n    compress\n    missingok\n    notifempty\n    create 0640 root root\n    sharedscripts\n    postrotate\n        systemctl reload httpd &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\n</code></pre>"},{"location":"linux/apache_rotate_logs/#3-test-log-rotation","title":"3. Test Log Rotation","text":"<p>Run:</p> <pre><code>sudo logrotate -d /etc/logrotate.d/httpd\n</code></pre> <p>This dry-run ensures the configuration is correct.</p>"},{"location":"linux/apache_rotate_logs/#4-verify-log-rotation","title":"4. Verify Log Rotation","text":"<p>Check rotated logs:</p> <pre><code>ls -lh /var/log/httpd/\n</code></pre> <p>You should see compressed logs (<code>.gz</code>) with only 3 rotated versions.</p> <p>For more details, check out this guide or this discussion. Let me know if you need further customization! \ud83d\ude80</p>"},{"location":"linux/apache_user/","title":"To create a custom Apache user tailored for web applications, follow these steps","text":""},{"location":"linux/apache_user/#1-create-a-custom-user","title":"1. Create a Custom User","text":"<p>Run the following command to create a new user (replace <code>&lt;username&gt;</code> with the desired name):</p> <pre><code>sudo useradd -M -s /sbin/nologin &lt;username&gt;\n</code></pre> <ul> <li><code>-M</code> \u2192 Prevents creating a home directory.</li> <li><code>-s /sbin/nologin</code> \u2192 Restricts login access for security.</li> </ul>"},{"location":"linux/apache_user/#2-set-a-password-for-the-user","title":"2. Set a Password for the User","text":"<p>If needed, set a password:</p> <pre><code>sudo passwd &lt;username&gt;\n</code></pre>"},{"location":"linux/apache_user/#3-modify-apache-to-run-under-the-custom-user","title":"3. Modify Apache to Run Under the Custom User","text":"<p>Edit the Apache configuration file:</p> <pre><code>sudo nano /etc/httpd/conf/httpd.conf  # For CentOS/RHEL\nsudo nano /etc/apache2/apache2.conf   # For Ubuntu/Debian\n</code></pre> <p>Find these lines:</p> <pre><code>User apache\nGroup apache\n</code></pre> <p>Replace them with:</p> <pre><code>User &lt;username&gt;\nGroup &lt;username&gt;\n</code></pre> <p>Save and exit.</p>"},{"location":"linux/apache_user/#4-restart-apache","title":"4. Restart Apache","text":"<p>Apply the changes:</p> <pre><code>sudo systemctl restart httpd  # For CentOS/RHEL\nsudo systemctl restart apache2  # For Ubuntu/Debian\n</code></pre>"},{"location":"linux/apache_user/#5-verify-the-changes","title":"5. Verify the Changes","text":"<p>Check if Apache is running under the custom user:</p> <pre><code>ps aux | grep apache\n</code></pre> <p>This setup enhances security by isolating web applications under unique users. Let me know if you need further adjustments! \ud83d\ude80</p>"},{"location":"linux/appache_redirect/","title":"Apache redirect","text":"<p>To configure Apache on appserver to listen on port 8083 and set up the required redirects, follow these steps:</p>"},{"location":"linux/appache_redirect/#1-change-apache-to-listen-on-port-8083","title":"1. Change Apache to Listen on Port 8083","text":"<p>Edit the Apache configuration file:</p> <pre><code>sudo nano /etc/httpd/conf/httpd.conf\n</code></pre> <p>Find the Listen directive and update it:</p> <pre><code>Listen 8083\n</code></pre> <p>Save and exit, then restart Apache:</p> <pre><code>sudo systemctl restart httpd\n</code></pre>"},{"location":"linux/appache_redirect/#2-configure-redirects","title":"2. Configure Redirects","text":"<p>Edit the VirtualHost configuration file:</p> <pre><code>sudo nano /etc/httpd/conf.d/redirects.conf\n</code></pre> <p>Add the following rules:</p>"},{"location":"linux/appache_redirect/#a-permanent-redirect-301-from-non-www-to-www","title":"a) Permanent Redirect (301) from Non-WWW to WWW","text":"<pre><code>&lt;VirtualHost *:8083&gt;\n    ServerName stapp02.company-name.mycorp.com\n    Redirect 301 / http://www.stapp02.company-name.mycorp.com:8083/\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"linux/appache_redirect/#b-temporary-redirect-302-from-blog-to-news","title":"b) Temporary Redirect (302) from <code>/blog/</code> to <code>/news/</code>","text":"<pre><code>&lt;VirtualHost *:8083&gt;\n    ServerName www.stapp02.company-name.mycorp.com\n    Redirect 302 /blog/ http://www.stapp02.company-name.mycorp.com:8083/news/\n&lt;/VirtualHost&gt;\n</code></pre> <p>Save and exit.</p>"},{"location":"linux/appache_redirect/#3-restart-apache","title":"3. Restart Apache","text":"<pre><code>sudo systemctl restart httpd\n</code></pre>"},{"location":"linux/appache_redirect/#4-verify-redirects","title":"4. Verify Redirects","text":"<p>Test the redirects using:</p> <pre><code>curl -I http://stapp02.company-name.mycorp.com:8083/\ncurl -I http://www.stapp02.company-name.mycorp.com:8083/blog/\n</code></pre> <p>This ensures that Apache listens on port 8083 and correctly redirects requests. \ud83d\ude80 Let me know if you need further customization! You can also check out this guide for more details.</p>"},{"location":"linux/application_security_iptables/","title":"configure iptables","text":"<p>To configure iptables on the Nautilus backup server to allow incoming connections to Nginx (port 8094) and block incoming connections to Apache (port 5000), follow these steps:</p>"},{"location":"linux/application_security_iptables/#1-allow-incoming-connections-to-nginx-port-8094","title":"1. Allow Incoming Connections to Nginx (Port 8094)","text":"<p>Run:</p> <pre><code># put at the end\nsudo iptables -A INPUT -p tcp --dport 8094 -j ACCEPT\n# put at the top\nsudo iptables -I INPUT -p tcp --dport 8080 -j ACCEPT\n</code></pre>"},{"location":"linux/application_security_iptables/#2-block-incoming-connections-to-apache-port-5000","title":"2. Block Incoming Connections to Apache (Port 5000)","text":"<p>Run:</p> <pre><code>sudo iptables -A INPUT -p tcp --dport 5000 -j DROP\n</code></pre>"},{"location":"linux/application_security_iptables/#3-save-the-rules-to-make-them-permanent","title":"3. Save the Rules to Make Them Permanent","text":"<p>On CentOS/RHEL, save the rules:</p> <pre><code># this gave an error sudo iptables-save &gt; /etc/sysconfig/iptables\nsudo /usr/libexec/iptables/iptables.init save\n</code></pre> <p>On Ubuntu/Debian, use:</p> <pre><code>sudo netfilter-persistent save\n</code></pre>"},{"location":"linux/application_security_iptables/#4-verify-rules","title":"4. Verify Rules","text":"<p>Check the active rules:</p> <pre><code>sudo iptables -L -v -n\n</code></pre> <p>This ensures that Nginx is accessible while Apache remains blocked. You can find more details in this guide or this tutorial. Let me know if you need further customization! \ud83d\ude80</p>"},{"location":"linux/backup_example/","title":"backup example","text":"<p>Here's how you can create the news_backup.sh script to automate website backups:</p>"},{"location":"linux/backup_example/#1-generate-the-backup-script","title":"1. Generate the Backup Script","text":"<p>Create the script in <code>/scripts/news_backup.sh</code>:</p> <pre><code>#!/bin/bash\n\n# Define variables\nBACKUP_DIR=\"/backup\"\nSOURCE_DIR=\"/var/www/html/news\"\nARCHIVE_NAME=\"mycorp_news.zip\"\nDEST_SERVER=\"nautilus-backup-server\"\nDEST_DIR=\"/backup\"\n\n# Create the backup archive\nmkdir -p \"$BACKUP_DIR\"\nzip -r \"$BACKUP_DIR/$ARCHIVE_NAME\" \"$SOURCE_DIR\"\n\n# Copy the archive to Nautilus Backup Server\nscp \"$BACKUP_DIR/$ARCHIVE_NAME\" username@\"$DEST_SERVER\":\"$DEST_DIR\"\n\necho \"Backup completed successfully!\"\n</code></pre>"},{"location":"linux/backup_example/#2-ensure-password-less-ssh","title":"2. Ensure Password-less SSH","text":"<p>To prevent password prompts when copying files:</p> <pre><code>ssh-keygen -t rsa -b 4096\nssh-copy-id username@nautilus-backup-server\n</code></pre> <p>This sets up SSH key-based authentication.</p>"},{"location":"linux/backup_example/#3-make-the-script-executable","title":"3. Make the Script Executable","text":"<pre><code>chmod +x /scripts/news_backup.sh\n</code></pre>"},{"location":"linux/backup_example/#4-schedule-automatic-backups","title":"4. Schedule Automatic Backups","text":"<p>Add a cron job to run the script daily:</p> <pre><code>crontab -e\n</code></pre> <p>Then add:</p> <pre><code>0 2 * * * /scripts/news_backup.sh\n</code></pre> <p>This runs the backup at 2 AM daily.</p> <p>For more details, check out this guide on automating backups with Bash scripts. Let me know if you need further customization! \ud83d\ude80</p>"},{"location":"linux/banner/","title":"Messege of the Day","text":"<p>To update the Message of the Day (MOTD) on all application and database servers in Datacenter, follow these steps:</p>"},{"location":"linux/banner/#step-1-copy-the-approved-username-to-each-server","title":"Step 1: Copy the Approved username to Each Server","text":"<p>Since the username file is located on the jump host, you need to copy it to the target servers.</p> <pre><code>scp /home/thor/nautilus_username user@server:/etc/motd\n</code></pre> <p>Replace <code>user@server</code> with the actual usernames and server IP addresses.</p> <p>If you have multiple servers, use a loop:</p> <pre><code>SERVERS=(\"app-server1\" \"app-server2\" \"db-server1\" \"db-server2\")\nfor SERVER in \"${SERVERS[@]}\"; do\n  scp /home/thor/nautilus_username user@$SERVER:/etc/motd\ndone\n</code></pre>"},{"location":"linux/banner/#step-2-set-permissions","title":"Step 2: Set Permissions","text":"<p>Ensure the MOTD file is readable:</p> <pre><code>sudo chmod 644 /etc/motd\n</code></pre>"},{"location":"linux/banner/#step-3-verify-the-motd-is-applied","title":"Step 3: Verify the MOTD is Applied","text":"<p>Log into each server and check the contents:</p> <pre><code>cat /etc/motd\n</code></pre> <p>Or log out and back in to see if the username displays upon login.</p>"},{"location":"linux/banner/#automating-using-pdsh-for-multiple-servers","title":"Automating Using <code>pdsh</code> for Multiple Servers","text":"<p>If managing multiple servers, parallel execution using <code>pdsh</code> is helpful:</p> <pre><code>pdsh -w app-server1,app-server2,db-server1,db-server2 \"scp /home/thor/nautilus_username root@{}:/etc/motd &amp;&amp; chmod 644 /etc/motd\"\n</code></pre> <p>Now, all servers should have the compliance-approved MOTD applied correctly! \ud83d\ude80 Let me know if you need further adjustments.</p>"},{"location":"linux/collaboratve_directories/","title":"collaborative directory","text":"<p>To set up the collaborative directory with proper permissions and ownership</p>"},{"location":"linux/collaboratve_directories/#step-1-create-the-directory","title":"Step 1: Create the Directory","text":"<pre><code>sudo mkdir -p /dbadmin/data\n</code></pre> <ul> <li>The <code>-p</code> ensures parent directories are created if they don\u2019t exist.</li> </ul>"},{"location":"linux/collaboratve_directories/#step-2-create-the-group","title":"Step 2: Create the Group","text":"<p>Ensure the dbadmin group exists:</p> <pre><code>sudo groupadd dbadmin\n</code></pre>"},{"location":"linux/collaboratve_directories/#step-3-set-group-ownership","title":"Step 3: Set Group Ownership","text":"<p>Assign ownership of the directory to the dbadmin group:</p> <pre><code>sudo chown :dbadmin /dbadmin/data\n</code></pre>"},{"location":"linux/collaboratve_directories/#step-4-adjust-permissions","title":"Step 4: Adjust Permissions","text":"<p>Grant full read/write/execute permissions to the user and group, while restricting access from others:</p> <pre><code>sudo chmod 770 /dbadmin/data\n</code></pre> <ul> <li><code>770</code> means:</li> <li>Owner (user): Read, Write, Execute (<code>rwx</code>)</li> <li>Group (<code>dbadmin</code>): Read, Write, Execute (<code>rwx</code>)</li> <li>Others: No Access (<code>---</code>)</li> </ul>"},{"location":"linux/collaboratve_directories/#step-5-ensure-new-files-inherit-group-ownership","title":"Step 5: Ensure New Files Inherit Group Ownership","text":"<p>To automatically assign files within <code>/dbadmin/data</code> to the dbadmin group:</p> <pre><code>sudo chmod g+s /dbadmin/data\n</code></pre>"},{"location":"linux/collaboratve_directories/#verification","title":"Verification","text":"<p>Check permissions using:</p> <pre><code>ls -ld /dbadmin/data\n</code></pre> <p>Ensure output shows:</p> <pre><code>drwxrwx---  root dbadmin ...\n</code></pre> <p>Now, only users in the dbadmin group can access and modify files inside <code>/dbadmin/data</code>, ensuring secure collaboration. \ud83d\ude80 Let me know if you need any refinements!</p>"},{"location":"linux/config_sudo/","title":"config sudo access","text":"<p>To grant sudo access to user <code>ammar</code> on all application servers and configure password-less sudo, follow these steps:</p>"},{"location":"linux/config_sudo/#step-1-grant-sudo-access","title":"Step 1: Grant Sudo Access","text":"<p>Run the following command on each app server:</p> <pre><code>sudo usermod -aG wheel ammar  # For RHEL/CentOS-based systems\nsudo usermod -aG sudo ammar  # For Debian/Ubuntu-based systems\n</code></pre> <p>This adds <code>ammar</code> to the appropriate sudo group, allowing administrative access.</p>"},{"location":"linux/config_sudo/#step-2-set-up-password-less-sudo","title":"Step 2: Set Up Password-less Sudo","text":"<p>Modify the sudoers file to allow <code>ammar</code> to run commands without requiring a password:</p> <p>Run:</p> <pre><code>sudo visudo\n</code></pre> <p>Add the following line at the bottom:</p> <pre><code>ammar ALL=(ALL) NOPASSWD: ALL\n</code></pre> <p>Save and exit.</p>"},{"location":"linux/config_sudo/#step-3-verify-the-configuration","title":"Step 3: Verify the Configuration","text":"<p>Log in as <code>ammar</code> and try running a privileged command:</p> <pre><code>sudo ls /root\n</code></pre> <p>If no password is prompted, the setup is correct.</p>"},{"location":"linux/config_sudo/#step-4-automate-across-multiple-servers","title":"Step 4: Automate Across Multiple Servers","text":"<p>To apply these changes across multiple servers, use Ansible or an SSH loop.</p>"},{"location":"linux/config_sudo/#using-ansible","title":"Using Ansible","text":"<p>Create a playbook <code>grant_sudo.yml</code>:</p> <pre><code>- name: Grant sudo access to user ammar\n  hosts: all\n  become: yes\n  tasks:\n    - name: Add ammar to sudo group (Debian-based)\n      user:\n        name: ammar\n        groups: sudo\n        append: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Add ammar to wheel group (RHEL-based)\n      user:\n        name: ammar\n        groups: wheel\n        append: yes\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Configure password-less sudo\n      lineinfile:\n        path: /etc/sudoers\n        line: \"ammar ALL=(ALL) NOPASSWD: ALL\"\n        validate: \"visudo -cf %s\"\n</code></pre> <p>Run the playbook:</p> <pre><code>ansible-playbook -i inventory grant_sudo.yml\n</code></pre>"},{"location":"linux/config_sudo/#using-ssh-loop","title":"Using SSH Loop","text":"<pre><code>SERVERS=(\"app-server1\" \"app-server2\" \"app-server3\")\nfor SERVER in \"${SERVERS[@]}\"; do\n  ssh $SERVER \"sudo usermod -aG wheel ammar &amp;&amp; echo 'ammar ALL=(ALL) NOPASSWD: ALL' | sudo tee -a /etc/sudoers\"\ndone\n</code></pre> <p>Now, <code>ammar</code> has password-less sudo access across all application servers! \ud83d\ude80 Let me know if you need further refinements.</p>"},{"location":"linux/configure_yum_repos/","title":"configure yum repos","text":"<p>To set up the local YUM repository on the Nautilus Backup Server, follow these steps:</p>"},{"location":"linux/configure_yum_repos/#step-1-create-the-repository-file","title":"Step 1: Create the Repository File","text":"<p>Create a new YUM repository configuration file:</p> <pre><code>sudo nano /etc/yum.repos.d/local_yum.repo\n</code></pre> <p>Add the following content:</p> <pre><code>[local_yum]\nname=Local YUM Repository\nbaseurl=file:///packages/downloaded_rpms/\nenabled=1\ngpgcheck=0\n</code></pre> <p>Save and exit.</p>"},{"location":"linux/configure_yum_repos/#step-2-clean-and-update-yum","title":"Step 2: Clean and Update YUM","text":"<p>Refresh YUM to recognize the new repository:</p> <pre><code>sudo yum clean all\nsudo yum makecache\n</code></pre>"},{"location":"linux/configure_yum_repos/#step-3-verify-repository","title":"Step 3: Verify Repository","text":"<p>Check if the new repository is listed:</p> <pre><code>yum repolist\n</code></pre> <p>Ensure <code>local_yum</code> appears in the output.</p>"},{"location":"linux/configure_yum_repos/#step-4-install-vim-enhanced-from-local-repository","title":"Step 4: Install <code>vim-enhanced</code> from Local Repository","text":"<p>Run the following command:</p> <pre><code>sudo yum install -y vim-enhanced --disablerepo=\"*\" --enablerepo=\"local_yum\"\n</code></pre> <p>This ensures the package is installed only from the local repository.</p>"},{"location":"linux/configure_yum_repos/#step-5-verify-installation","title":"Step 5: Verify Installation","text":"<p>Confirm <code>vim-enhanced</code> is installed:</p> <pre><code>vim --version\n</code></pre> <p>Now the local YUM repository is successfully configured on the Nautilus Backup Server! \ud83d\ude80 Let me know if you need adjustments.</p>"},{"location":"linux/create_cron_job/","title":"create cron job","text":"<p>To set up a test cron job, follow these steps:</p>"},{"location":"linux/create_cron_job/#step-1-install-cronie-package","title":"Step 1: Install <code>cronie</code> Package","text":"<p>On each Nautilus app server, run:</p> <pre><code>sudo yum install -y cronie  # For RHEL/CentOS\n</code></pre> <p>OR</p> <pre><code>sudo apt update &amp;&amp; sudo apt install -y cron  # For Ubuntu/Debian\n</code></pre>"},{"location":"linux/create_cron_job/#step-2-start-and-enable-the-crond-service","title":"Step 2: Start and Enable the <code>crond</code> Service","text":"<p>Once installed, start the cron daemon:</p> <pre><code>sudo systemctl start crond\nsudo systemctl enable crond\n</code></pre> <p>Verify it\u2019s running:</p> <pre><code>systemctl status crond\n</code></pre>"},{"location":"linux/create_cron_job/#step-3-add-the-cron-job-for-root","title":"Step 3: Add the Cron Job for Root","text":"<p>Edit the root user's crontab:</p> <pre><code>sudo crontab -e\n</code></pre> <p>Add the following line:</p> <pre><code>*/5 * * * * echo hello &gt; /tmp/cron_text\n</code></pre> <ul> <li>This ensures the job runs every 5 minutes and writes <code>\"hello\"</code> to <code>/tmp/cron_text</code>.</li> </ul>"},{"location":"linux/create_cron_job/#step-4-verify-the-cron-job","title":"Step 4: Verify the Cron Job","text":"<p>To check if the cron job was added, run:</p> <pre><code>sudo crontab -l\n</code></pre> <p>Wait 5 minutes, then confirm execution:</p> <pre><code>cat /tmp/cron_text\n</code></pre> <p>If <code>\"hello\"</code> appears, your setup is working!</p> <p>Let me know if you need adjustments. \ud83d\ude80</p> <pre><code>SERVERS=\"server1 server2 server3\"\nfor SERVER in $SERVERS; do\n  ssh $SERVER \"sudo yum install -y cronie &amp;&amp; sudo systemctl start crond &amp;&amp; sudo systemctl enable crond &amp;&amp; echo '*/5 * * * * echo hello &gt; /tmp/cron_text' | sudo crontab -\"\ndone\n</code></pre>"},{"location":"linux/create_service/","title":"create a service","text":"<p>To create the mercury.service systemd unit file, follow these steps:</p>"},{"location":"linux/create_service/#1-create-the-unit-file","title":"1. Create the Unit File","text":"<p>Run:</p> <pre><code>sudo nano /etc/systemd/system/mercury.service\n</code></pre> <p>Add the following configuration:</p> <pre><code>[Unit]\nDescription=Project Mercury Web Application\nAfter=network.target\n\n[Service]\nUser=mercury\nWorkingDirectory=/opt/caleston-code/mercuryProject/\nExecStart=/usr/bin/python3 manage.py runserver 0.0.0.0:8000\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Save and exit.</p>"},{"location":"linux/create_service/#2-reload-systemd","title":"2. Reload Systemd","text":"<pre><code>sudo systemctl daemon-reload\n</code></pre>"},{"location":"linux/create_service/#3-enable-and-start-the-service","title":"3. Enable and Start the Service","text":"<pre><code>sudo systemctl enable mercury.service\nsudo systemctl start mercury.service\n</code></pre>"},{"location":"linux/create_service/#4-verify-the-service","title":"4. Verify the Service","text":"<p>Check the status:</p> <pre><code>sudo systemctl status mercury.service\n</code></pre> <p>This ensures the mercury.service is running and will restart on failure. \ud83d\ude80 Let me know if you need further customization! You can also check out this guide for more details.</p>"},{"location":"linux/cron_access/","title":"Cron access","text":"<p>To configure crontab access on appserver, follow these steps:</p>"},{"location":"linux/cron_access/#step-1-allow-crontab-access-for-user-james","title":"Step 1: Allow Crontab Access for User <code>james</code>","text":"<p>Ensure the <code>/etc/cron.allow</code> file exists and add the <code>james</code> user to it:</p> <pre><code>echo \"james\" | sudo tee -a /etc/cron.allow\n</code></pre> <p>This explicitly grants <code>james</code> permission to use crontab.</p>"},{"location":"linux/cron_access/#step-2-deny-crontab-access-for-user-garrett","title":"Step 2: Deny Crontab Access for User <code>garrett</code>","text":"<p>Add <code>garrett</code> to the <code>/etc/cron.deny</code> file:</p> <pre><code>echo \"garrett\" | sudo tee -a /etc/cron.deny\n</code></pre> <p>This prevents <code>garrett</code> from creating or modifying cron jobs.</p>"},{"location":"linux/cron_access/#step-3-verify-the-configuration","title":"Step 3: Verify the Configuration","text":"<p>Check the contents of both files to confirm the changes:</p> <pre><code>cat /etc/cron.allow\ncat /etc/cron.deny\n</code></pre>"},{"location":"linux/cron_access/#step-4-test-access","title":"Step 4: Test Access","text":"<p>Try running <code>crontab -e</code> as both users to ensure restrictions are working:</p> <pre><code>sudo -u james crontab -e  # Should work\nsudo -u garrett crontab -e  # Should be denied\n</code></pre> <p>This ensures crontab permissions align with the security policy.</p> <p>Let me know if you need additional refinements! \ud83d\ude80</p>"},{"location":"linux/disable_root_login/","title":"Disable root login","text":"<p>To disable direct root SSH login on all app servers within the company-name Datacenter, follow these steps:</p>"},{"location":"linux/disable_root_login/#step-1-edit-the-ssh-configuration-file","title":"Step 1: Edit the SSH Configuration File","text":"<p>Open the SSH configuration file using a text editor:</p> <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre>"},{"location":"linux/disable_root_login/#step-2-modify-the-root-login-setting","title":"Step 2: Modify the Root Login Setting","text":"<p>Find the following line:</p> <pre><code>PermitRootLogin yes\n</code></pre> <p>Change it to:</p> <pre><code>PermitRootLogin no\n</code></pre> <p>If the line doesn't exist, add it manually.</p>"},{"location":"linux/disable_root_login/#step-3-save-and-exit","title":"Step 3: Save and Exit","text":"<p>Press <code>CTRL + X</code>, then <code>Y</code>, and hit <code>ENTER</code> to save the changes.</p>"},{"location":"linux/disable_root_login/#step-4-restart-the-ssh-service","title":"Step 4: Restart the SSH Service","text":"<p>Apply the new settings by restarting SSH:</p> <pre><code>sudo systemctl restart sshd\n</code></pre>"},{"location":"linux/disable_root_login/#step-5-verify-the-configuration","title":"Step 5: Verify the Configuration","text":"<p>Run the following command to confirm the change:</p> <pre><code>sudo grep PermitRootLogin /etc/ssh/sshd_config\n</code></pre> <p>This ensures direct root login is disabled.</p>"},{"location":"linux/disable_root_login/#step-6-test-access","title":"Step 6: Test Access","text":"<p>Try logging in as root remotely:</p> <pre><code>ssh root@server_ip\n</code></pre> <p>It should now be restricted.</p> <p>These security measures help prevent unauthorized access and enhance system protection. Let me know if you need any further refinements! \ud83d\ude80</p>"},{"location":"linux/dns_troubleshooting/","title":"Dns troubleshooting","text":"<p>It looks like your message got cut off. If you're looking to add additional DNS nameservers to App Server 3, here\u2019s how you can do it:</p>"},{"location":"linux/dns_troubleshooting/#step-1-edit-the-dns-configuration-file","title":"Step 1: Edit the DNS Configuration File","text":"<p>Modify the <code>/etc/resolv.conf</code> file:</p> <pre><code>sudo nano /etc/resolv.conf\n</code></pre> <p>Add the new nameservers at the top:</p> <pre><code>nameserver 8.8.8.8\nnameserver 1.1.1.1\n</code></pre> <p>Save and exit.</p>"},{"location":"linux/dns_troubleshooting/#step-2-make-dns-changes-persistent","title":"Step 2: Make DNS Changes Persistent","text":"<p>Since <code>/etc/resolv.conf</code> might get overwritten by system processes, make it persistent by editing:</p> <pre><code>sudo nano /etc/systemd/resolved.conf\n</code></pre> <p>Locate and modify the following line:</p> <pre><code>DNS=8.8.8.8 1.1.1.1\n</code></pre> <p>Then restart the service:</p> <pre><code>sudo systemctl restart systemd-resolved\n</code></pre>"},{"location":"linux/dns_troubleshooting/#step-3-verify-dns-resolution","title":"Step 3: Verify DNS Resolution","text":"<p>Check if the new nameservers are resolving correctly:</p> <pre><code>nslookup google.com\n</code></pre> <p>OR</p> <pre><code>dig google.com\n</code></pre> <p>If this is a temporary fix, consider monitoring DNS stability before making permanent changes. Let me know if you need further refinements! \ud83d\ude80</p>"},{"location":"linux/enable_gui/","title":"Enable gui","text":"<p>To enable GUI booting by default on all App servers within the company-name Datacenter without rebooting, follow these steps:</p>"},{"location":"linux/enable_gui/#step-1-change-the-default-runlevel-to-graphical-mode","title":"Step 1: Change the Default Runlevel to Graphical Mode","text":"<p>Run the following command to set the default target to graphical mode:</p> <pre><code>sudo systemctl set-default graphical.target\n</code></pre> <p>This ensures that on future startups, the servers boot into GUI mode.</p>"},{"location":"linux/enable_gui/#step-2-confirm-the-change","title":"Step 2: Confirm the Change","text":"<p>Verify the default target setting using:</p> <pre><code>systemctl get-default\n</code></pre> <p>It should return:</p> <pre><code>graphical.target\n</code></pre>"},{"location":"linux/enable_gui/#step-3-start-gui-mode-immediately-without-reboot","title":"Step 3: Start GUI Mode Immediately (Without Reboot)","text":"<p>Apply the graphical mode without rebooting by running:</p> <pre><code>sudo systemctl isolate graphical.target\n</code></pre> <p>This switches the current session to GUI mode while keeping the system running.</p>"},{"location":"linux/enable_gui/#step-4-validate-gui-is-running","title":"Step 4: Validate GUI is Running","text":"<p>Check the status of the graphical target:</p> <pre><code>systemctl status graphical.target\n</code></pre> <p>If everything is configured correctly, the system should now be running with GUI enabled without requiring a reboot.</p> <p>Let me know if you need additional modifications! \ud83d\ude80</p>"},{"location":"linux/find_command/","title":"Find command","text":"<p>To locate and copy all <code>.css</code> files while maintaining the directory structure, follow these steps on appserver:</p>"},{"location":"linux/find_command/#step-1-find-all-css-files","title":"Step 1: Find All <code>.css</code> Files","text":"<p>Run the following command to list all <code>.css</code> files (excluding directories) in <code>/var/www/html/beta</code>:</p> <pre><code>find /var/www/html/beta -type f -name \"*.css\"\n</code></pre>"},{"location":"linux/find_command/#step-2-copy-files-while-preserving-parent-directory-structure","title":"Step 2: Copy Files While Preserving Parent Directory Structure","text":"<p>Use the <code>find</code> command with <code>cp --parents</code> to copy only <code>.css</code> files while preserving their directory structure:</p> <pre><code>find /var/www/html/beta -type f -name \"*.css\" -exec cp --parents {} /beta \\;\n</code></pre>"},{"location":"linux/find_command/#key-considerations","title":"Key Considerations","text":"<ul> <li><code>find</code> \u2192 Searches for all <code>.css</code> files.</li> <li><code>-type f</code> \u2192 Ensures only files are selected (not directories).</li> <li><code>-exec cp --parents {} /beta \\;</code> \u2192 Copies files while retaining their parent directories.</li> </ul>"},{"location":"linux/find_command/#step-3-verify-the-copied-files","title":"Step 3: Verify the Copied Files","text":"<p>List the copied files:</p> <pre><code>ls -R /beta\n</code></pre> <p>This ensures all <code>.css</code> files have been transferred securely without copying unrelated content.</p> <p>Let me know if you need further adjustments! \ud83d\ude80</p>"},{"location":"linux/firewall_configuration/","title":"Firewall configuration","text":"<p>To install and configure <code>firewalld</code> for Nginx and Apache on all app servers in company-name Datacenter, follow these steps:</p>"},{"location":"linux/firewall_configuration/#step-1-install-firewalld","title":"Step 1: Install <code>firewalld</code>","text":"<p>Run the following on each app server:</p> <pre><code>sudo yum install -y firewalld  # RHEL/CentOS\nsudo apt update &amp;&amp; sudo apt install -y firewalld  # Debian/Ubuntu\n</code></pre>"},{"location":"linux/firewall_configuration/#step-2-start-and-enable-firewalld","title":"Step 2: Start and Enable <code>firewalld</code>","text":"<pre><code>sudo systemctl start firewalld\nsudo systemctl enable firewalld\n</code></pre> <p>Check status:</p> <pre><code>systemctl status firewalld\n</code></pre>"},{"location":"linux/firewall_configuration/#step-3-configure-firewall-rules","title":"Step 3: Configure Firewall Rules","text":""},{"location":"linux/firewall_configuration/#allow-incoming-connections-on-nginx-port-80","title":"Allow Incoming Connections on Nginx Port (80)","text":"<pre><code>sudo firewall-cmd --zone=public --add-port=80/tcp --permanent\n</code></pre>"},{"location":"linux/firewall_configuration/#block-incoming-connections-on-apache-port-8080","title":"Block Incoming Connections on Apache Port (8080)","text":"<pre><code>sudo firewall-cmd --zone=public --remove-port=8080/tcp --permanent\nsudo firewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" port protocol=\"tcp\" port=\"8080\" reject' --permanent\n</code></pre>"},{"location":"linux/firewall_configuration/#reload-firewall-to-apply-changes","title":"Reload Firewall to Apply Changes","text":"<pre><code>sudo firewall-cmd --reload\n</code></pre>"},{"location":"linux/firewall_configuration/#step-4-start-apache-and-nginx-services","title":"Step 4: Start Apache and Nginx Services","text":"<pre><code>sudo systemctl start nginx\nsudo systemctl enable nginx\n\nsudo systemctl start httpd  # For Apache\nsudo systemctl enable httpd\n</code></pre> <p>Verify services are running:</p> <pre><code>systemctl status nginx\nsystemctl status httpd\n</code></pre>"},{"location":"linux/firewall_configuration/#step-5-verify-firewall-rules","title":"Step 5: Verify Firewall Rules","text":"<p>Check allowed and blocked ports:</p> <pre><code>sudo firewall-cmd --list-all --zone=public\n</code></pre> <p>Now, Nginx traffic on port 80 is allowed, Apache traffic on port 8080 is blocked, and <code>firewalld</code> is set up permanently in the public zone. \ud83d\ude80 Let me know if you need adjustments!</p>"},{"location":"linux/firewall_enable_port/","title":"Firewall enable port","text":"<p>To allow incoming connections on port <code>5001/tcp</code> and ensure the zone is set to <code>public</code>, follow these steps:</p>"},{"location":"linux/firewall_enable_port/#step-1-add-firewall-rule-for-port-5001","title":"Step 1: Add Firewall Rule for Port 5001","text":"<p>Run the following command to allow traffic on port <code>5001/tcp</code>:</p> <pre><code>sudo firewall-cmd --zone=public --add-port=5001/tcp --permanent\n</code></pre>"},{"location":"linux/firewall_enable_port/#step-2-reload-firewalld-to-apply-changes","title":"Step 2: Reload Firewalld to Apply Changes","text":"<p>After adding the rule, reload the firewall:</p> <pre><code>sudo firewall-cmd --reload\n</code></pre>"},{"location":"linux/firewall_enable_port/#step-3-verify-the-rule","title":"Step 3: Verify the Rule","text":"<p>Confirm that port <code>5001/tcp</code> is allowed in the <code>public</code> zone:</p> <pre><code>sudo firewall-cmd --zone=public --list-ports\n</code></pre> <p>This will display all allowed ports, including <code>5001/tcp</code>.</p> <p>Once completed, the web UI application should be accessible. Let me know if you need any refinements! \ud83d\ude80</p>"},{"location":"linux/gdisk_create_partition/","title":"Gdisk create partition","text":"<p>You can create a GPT partition called <code>vdb1</code> of size 500MB on <code>/dev/vdb</code> using <code>gdisk</code> by following these steps:</p>"},{"location":"linux/gdisk_create_partition/#1-start-gdisk-on-devvdb","title":"1. Start <code>gdisk</code> on <code>/dev/vdb</code>","text":"<pre><code>sudo gdisk /dev/vdb\n</code></pre>"},{"location":"linux/gdisk_create_partition/#2-create-a-new-partition","title":"2. Create a New Partition","text":"<p>Inside <code>gdisk</code>, enter:</p> <pre><code>n  # Create a new partition\n1  # Partition number (first partition)\n  # Press Enter to accept the default first sector\n+500M  # Set partition size to 500MB\n8300  # Use Linux filesystem type (or another type if needed)\n</code></pre>"},{"location":"linux/gdisk_create_partition/#3-write-changes-to-disk","title":"3. Write Changes to Disk","text":"<pre><code>w  # Write changes\ny  # Confirm\n</code></pre>"},{"location":"linux/gdisk_create_partition/#4-verify-partition","title":"4. Verify Partition","text":"<p>Run:</p> <pre><code>lsblk /dev/vdb\nsudo gdisk -l /dev/vdb\n</code></pre> <p>For more details, check out this guide or this tutorial. Let me know if you need further customization! \ud83d\ude80</p>"},{"location":"linux/group_creation_and_user_assignment/","title":"Group Creation and User Assignment","text":"<p>To achieve group-based access control, follow these steps across all App servers in the datacenter:</p>"},{"location":"linux/group_creation_and_user_assignment/#step-1-create-the-group","title":"Step 1: Create the Group","text":"<p>Run the following command to create the group named <code>&lt;group_name&gt;</code>. Replace <code>group_name</code> with you actual groupname</p> <pre><code>sudo groupadd &lt;group_name&gt;\n</code></pre> <p>This ensures the group exists before adding users.</p>"},{"location":"linux/group_creation_and_user_assignment/#step-2-create-the-user-if-it-doesnt-exist","title":"Step 2: Create the User (if it doesn't exist)","text":"<p>replace <code>&lt;username&gt;</code> with you actual username Check if the user <code>&lt;username&gt;</code> already exists.</p> <pre><code>id &lt;username&gt;\n</code></pre> <p>If the user does not exist, create it:</p> <pre><code>sudo useradd -m -s /bin/bash &lt;username&gt;\n</code></pre> <p>The <code>-m</code> flag creates a home directory, and <code>-s /bin/bash</code> assigns Bash as the default shell.</p>"},{"location":"linux/group_creation_and_user_assignment/#step-3-add-user-to-the-group","title":"Step 3: Add User to the Group","text":"<p>Now, add <code>&lt;username&gt;</code> to <code>&lt;group_name&gt;</code>:</p> <pre><code>sudo usermod -aG &lt;group_name&gt; &lt;username&gt;\n</code></pre> <p>This ensures <code>&lt;username&gt;</code> becomes a member of the group.</p>"},{"location":"linux/group_creation_and_user_assignment/#step-4-verify-the-changes","title":"Step 4: Verify the Changes","text":"<p>Confirm that <code>&lt;username&gt;</code> has been added successfully:</p> <pre><code>groups &lt;username&gt;\n</code></pre> <p>To verify on multiple servers, you can use SSH to run these commands remotely across all App servers.</p> <p>Let me know if you need automation scripts or further refinements! \ud83d\ude80</p>"},{"location":"linux/install_and_configure_sftp/","title":"Install and configure sftp","text":"<p>To configure SFTP access on appserver in company-name Datacenter, follow these steps:</p>"},{"location":"linux/install_and_configure_sftp/#1-create-the-sftp-user","title":"1. Create the SFTP User","text":"<p>Run:</p> <pre><code>sudo useradd -m -g ftp -s /sbin/nologin james\necho \"GyQkFRVNr3\" | sudo passwd james --stdin\n</code></pre> <p>This creates the user <code>james</code>, assigns it to the <code>ftp</code> group, and disables SSH shell access.</p>"},{"location":"linux/install_and_configure_sftp/#2-enable-password-authentication","title":"2. Enable Password Authentication","text":"<p>Edit the SSH configuration file:</p> <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> <p>Ensure the following lines exist:</p> <pre><code>PasswordAuthentication yes\nPermitRootLogin no\n</code></pre> <p>Save and exit.</p>"},{"location":"linux/install_and_configure_sftp/#3-restrict-user-to-sftp-only","title":"3. Restrict User to SFTP Only","text":"<p>Add the following lines at the end of <code>/etc/ssh/sshd_config</code>:</p> <pre><code>Match User james\nChrootDirectory /home/james\nForceCommand internal-sftp\nAllowTcpForwarding no\nX11Forwarding no\n</code></pre> <p>Save and exit.</p>"},{"location":"linux/install_and_configure_sftp/#4-restart-ssh-service","title":"4. Restart SSH Service","text":"<pre><code>sudo systemctl restart sshd\n</code></pre>"},{"location":"linux/install_and_configure_sftp/#5-verify-sftp-access","title":"5. Verify SFTP Access","text":"<p>Test the connection:</p> <pre><code>sftp james@&lt;server-ip&gt;\n</code></pre> <p>This ensures SFTP access is enabled, password authentication works, and <code>james</code> can only use SFTP. \ud83d\ude80 Let me know if you need further customization! You can also check out this guide for more details.</p> <p>This error occurs because the ChrootDirectory must be owned by root and must not be writable by any other user or group. To fix it, follow these steps:</p>"},{"location":"linux/install_and_configure_sftp/#1-set-correct-ownership","title":"1. Set Correct Ownership","text":"<p>Run:</p> <pre><code>sudo chown root:root /home/james\n</code></pre>"},{"location":"linux/install_and_configure_sftp/#2-set-correct-permissions","title":"2. Set Correct Permissions","text":"<p>Run:</p> <pre><code>sudo chmod 755 /home/james\n</code></pre> <p>This ensures that <code>/home/james</code> is owned by root and not writable by any other user.</p>"},{"location":"linux/install_and_configure_sftp/#3-create-a-writable-directory-for-james","title":"3. Create a Writable Directory for James","text":"<p>Since <code>james</code> cannot write to <code>/home/james</code>, create a subdirectory:</p> <pre><code>sudo mkdir /home/james/uploads\nsudo chown james:ftp /home/james/uploads\nsudo chmod 755 /home/james/uploads\n</code></pre> <p>This allows <code>james</code> to upload files inside <code>/home/james/uploads</code>.</p>"},{"location":"linux/install_and_configure_sftp/#4-restart-ssh-service_1","title":"4. Restart SSH Service","text":"<pre><code>sudo systemctl restart sshd\n</code></pre> <p>Now, try connecting via SFTP again. \ud83d\ude80 Let me know if you need further assistance! You can also check out this guide for more details.</p>"},{"location":"linux/install_and_configure_tomcat/","title":"Install and configure tomcat","text":"<p>Monte, here\u2019s how to install, configure, and deploy the Java-based application using Tomcat on appserver.</p>"},{"location":"linux/install_and_configure_tomcat/#step-1-install-tomcat-server","title":"Step 1: Install Tomcat Server","text":"<ol> <li>Update the system:    <code>bash    sudo yum update -y</code></li> <li>Install Tomcat:    <code>bash    sudo yum install -y tomcat</code></li> </ol>"},{"location":"linux/install_and_configure_tomcat/#step-2-configure-tomcat-to-run-on-port-8082","title":"Step 2: Configure Tomcat to Run on Port 8082","text":"<ol> <li>Open the Tomcat configuration file:    <code>bash    sudo nano /etc/tomcat/server.xml</code></li> <li>Locate the following section:    <code>xml    &lt;Connector port=\"8080\" protocol=\"HTTP/1.1\"               connectionTimeout=\"20000\"               redirectPort=\"8443\" /&gt;</code></li> <li>Change <code>port=\"8080\"</code> to <code>port=\"8082\"</code>:    <code>xml    &lt;Connector port=\"8082\" protocol=\"HTTP/1.1\"               connectionTimeout=\"20000\"               redirectPort=\"8443\" /&gt;</code></li> <li>Save and exit.</li> </ol>"},{"location":"linux/install_and_configure_tomcat/#step-3-deploy-rootwar","title":"Step 3: Deploy ROOT.war","text":"<ol> <li> <p>Transfer <code>ROOT.war</code> from Jump Host to appserver:    On the Jump Host, run:    <code>bash    scp /tmp/ROOT.war user@stapp01:/tmp/</code></p> </li> <li> <p>Move <code>ROOT.war</code> to Tomcat\u2019s deployment directory:    <code>bash    sudo mv /tmp/ROOT.war /var/lib/tomcat/webapps/ROOT.war</code>    This ensures the app is deployed at the base URL.</p> </li> </ol>"},{"location":"linux/install_and_configure_tomcat/#step-4-start-tomcat-and-verify-deployment","title":"Step 4: Start Tomcat and Verify Deployment","text":"<ol> <li> <p>Enable and Start Tomcat:    <code>bash    sudo systemctl enable tomcat    sudo systemctl start tomcat</code></p> </li> <li> <p>Check if Tomcat is running:    <code>bash    sudo systemctl status tomcat</code></p> </li> <li> <p>Verify Deployment:    Run:    <code>bash    curl http://stapp01:8082</code>    If successful, you should see the webpage output.</p> </li> </ol> <p>Everything should now be installed, configured, and deployed as required. \ud83d\ude80 Let me know if you run into any issues!</p>"},{"location":"linux/install_ansible/","title":"Install ansible","text":"<p>To install Ansible version 4.10.0 on the Jump Host using <code>pip3</code> and make it available globally, follow these steps:</p>"},{"location":"linux/install_ansible/#step-1-install-pip3-if-not-installed","title":"Step 1: Install <code>pip3</code> (if not installed)","text":"<p>Check if <code>pip3</code> is installed:</p> <pre><code>pip3 --version\n</code></pre> <p>If it's missing, install it:</p> <p>For RHEL/CentOS:</p> <pre><code>sudo yum install -y python3-pip\n</code></pre> <p>For Debian/Ubuntu:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install -y python3-pip\n</code></pre>"},{"location":"linux/install_ansible/#step-2-install-ansible-version-4100","title":"Step 2: Install Ansible Version 4.10.0","text":"<p>Run the following command to install Ansible 4.10.0:</p> <pre><code>sudo pip3 install ansible==4.10.0\n</code></pre> <ul> <li><code>sudo</code> ensures the package is installed globally, making Ansible accessible to all users.</li> </ul>"},{"location":"linux/install_ansible/#step-3-verify-installation","title":"Step 3: Verify Installation","text":"<p>Check if Ansible is installed:</p> <pre><code>ansible --version\n</code></pre> <p>Expected output should show version 4.10.0.</p>"},{"location":"linux/install_ansible/#step-4-ensure-ansible-is-accessible-globally","title":"Step 4: Ensure Ansible is Accessible Globally","text":"<p>To confirm all users can run Ansible, check where it's installed:</p> <pre><code>which ansible\n</code></pre> <p>It should be in <code>/usr/local/bin/ansible</code>. If it's not globally accessible, you may need to add it to the system-wide PATH.</p>"},{"location":"linux/install_ansible/#step-5-test-ansible-functionality","title":"Step 5: Test Ansible Functionality","text":"<p>Verify by running:</p> <pre><code>ansible --help\n</code></pre> <p>This ensures all users can execute Ansible commands correctly.</p> <p>Now your Jump Host is set up as an Ansible controller! \ud83d\ude80 Let me know if you need any adjustments.</p>"},{"location":"linux/install_jenkins/","title":"Install jenkins","text":"<p>Monte, here\u2019s how you can install the latest Jenkins Stable (LTS) release on your Ubuntu virtual machine:</p>"},{"location":"linux/install_jenkins/#step-1-update-your-system","title":"Step 1: Update Your System","text":"<p>Before installing Jenkins, update your package list:</p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre>"},{"location":"linux/install_jenkins/#step-2-install-java","title":"Step 2: Install Java","text":"<p>Jenkins requires Java. Install OpenJDK:</p> <pre><code>sudo apt install openjdk-17-jre -y\n</code></pre> <p>Verify the installation:</p> <pre><code>java -version\n</code></pre>"},{"location":"linux/install_jenkins/#step-3-add-jenkins-repository","title":"Step 3: Add Jenkins Repository","text":"<p>Download and add the Jenkins repository key:</p> <pre><code>sudo wget -O /usr/share/keyrings/jenkins-keyring.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key\n</code></pre> <p>Add the repository:</p> <pre><code>echo \"deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/\" | sudo tee /etc/apt/sources.list.d/jenkins.list &gt; /dev/null\n</code></pre>"},{"location":"linux/install_jenkins/#step-4-install-jenkins","title":"Step 4: Install Jenkins","text":"<p>Update the package list and install Jenkins:</p> <pre><code>sudo apt update\nsudo apt install jenkins -y\n</code></pre>"},{"location":"linux/install_jenkins/#step-5-start-and-enable-jenkins","title":"Step 5: Start and Enable Jenkins","text":"<p>Start Jenkins:</p> <pre><code>sudo systemctl start jenkins\n</code></pre> <p>Enable Jenkins to start on boot:</p> <pre><code>sudo systemctl enable jenkins\n</code></pre>"},{"location":"linux/install_jenkins/#step-6-verify-jenkins-status","title":"Step 6: Verify Jenkins Status","text":"<p>Check if Jenkins is running:</p> <pre><code>systemctl status jenkins\n</code></pre> <p>Once installed, you can access Jenkins via <code>http://your-server-ip:8080</code>. Let me know if you need help configuring it further! \ud83d\ude80</p>"},{"location":"linux/install_posix_mail_server/","title":"Install posix mail server","text":"<p>Monte, I\u2019ve cleaned up and organized the instructions for better readability and clarity. Here\u2019s the structured process:</p>"},{"location":"linux/install_posix_mail_server/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have: - A CentOS 9 server. - A non-root user with <code>sudo</code> privileges. - A valid domain name configured with proper DNS records (MX and A records).</p>"},{"location":"linux/install_posix_mail_server/#step-1-install-and-configure-postfix","title":"Step 1: Install and Configure Postfix","text":"<p>Postfix is a free and open-source mail transfer agent (MTA) used for routing and delivering emails.</p>"},{"location":"linux/install_posix_mail_server/#install-postfix","title":"Install Postfix","text":"<pre><code>sudo dnf install -y postfix\n</code></pre>"},{"location":"linux/install_posix_mail_server/#configure-postfix","title":"Configure Postfix","text":"<p>Open the main configuration file:</p> <pre><code>sudo nano /etc/postfix/main.cf\n</code></pre> <p>Modify the following parameters:</p> <pre><code>myhostname = mail.example.com\nmydomain = example.com\nmyorigin = $mydomain\ninet_interfaces = all\nmydestination = $myhostname, localhost.$mydomain, localhost, $mydomain\nmynetworks = 127.0.0.0/8\nhome_mailbox = Maildir/\nsmtpd_username = $myhostname ESMTP\n</code></pre>"},{"location":"linux/install_posix_mail_server/#enable-and-start-postfix","title":"Enable and Start Postfix","text":"<pre><code>sudo systemctl enable postfix\nsudo systemctl start postfix\n</code></pre>"},{"location":"linux/install_posix_mail_server/#step-2-create-email-account","title":"Step 2: Create Email Account","text":""},{"location":"linux/install_posix_mail_server/#add-the-user-ammar","title":"Add the User Ammar","text":"<pre><code>sudo useradd -m -s /bin/bash ammar\n</code></pre>"},{"location":"linux/install_posix_mail_server/#set-user-password","title":"Set User Password","text":"<pre><code>echo 'ammar:dCV3szSGNA' | sudo chpasswd\n</code></pre>"},{"location":"linux/install_posix_mail_server/#create-mail-directory","title":"Create Mail Directory","text":"<p>If <code>maildirmake</code> is unavailable, manually create Maildir format:</p> <pre><code>mkdir -p /home/ammar/Maildir/{cur,new,tmp}\n</code></pre> <p>Verify setup:</p> <pre><code>ls -l /home/ammar/Maildir\n</code></pre> <p>Set correct permissions:</p> <pre><code>sudo chown -R ammar:ammar /home/ammar/Maildir\n</code></pre>"},{"location":"linux/install_posix_mail_server/#step-3-install-and-configure-dovecot","title":"Step 3: Install and Configure Dovecot","text":"<p>Dovecot is an open-source IMAP and POP3 server.</p>"},{"location":"linux/install_posix_mail_server/#install-dovecot","title":"Install Dovecot","text":"<pre><code>sudo dnf install -y dovecot\n</code></pre>"},{"location":"linux/install_posix_mail_server/#enable-imap-and-pop3","title":"Enable IMAP and POP3","text":"<p>Edit configuration:</p> <pre><code>sudo nano /etc/dovecot/dovecot.conf\n</code></pre> <p>Add:</p> <pre><code>protocols = imap pop3\n</code></pre>"},{"location":"linux/install_posix_mail_server/#configure-mail-location","title":"Configure Mail Location","text":"<p>Edit:</p> <pre><code>sudo nano /etc/dovecot/conf.d/10-mail.conf\n</code></pre> <p>Set:</p> <pre><code>mail_location = maildir:~/Maildir\n</code></pre>"},{"location":"linux/install_posix_mail_server/#configure-authentication","title":"Configure Authentication","text":"<p>Edit:</p> <pre><code>sudo nano /etc/dovecot/conf.d/10-auth.conf\n</code></pre> <p>Modify:</p> <pre><code>disable_plaintext_auth = no\nauth_mechanisms = plain login\n</code></pre>"},{"location":"linux/install_posix_mail_server/#enable-and-start-dovecot","title":"Enable and Start Dovecot","text":"<pre><code>sudo systemctl enable dovecot\nsudo systemctl start dovecot\n</code></pre>"},{"location":"linux/install_posix_mail_server/#step-4-configure-firewall","title":"Step 4: Configure Firewall","text":"<p>Allow necessary ports:</p> <pre><code>sudo firewall-cmd --add-service=smtp --permanent\nsudo firewall-cmd --add-service=pop3 --permanent\nsudo firewall-cmd --add-service=imap --permanent\nsudo firewall-cmd --reload\n</code></pre>"},{"location":"linux/install_posix_mail_server/#step-5-testing-the-setup","title":"Step 5: Testing the Setup","text":""},{"location":"linux/install_posix_mail_server/#verify-postfix","title":"Verify Postfix","text":"<p>Send a test email:</p> <pre><code>echo \"Test email from Postfix\" | mail -s \"Test Postfix\" your-email@example.com\n</code></pre>"},{"location":"linux/install_posix_mail_server/#verify-dovecot","title":"Verify Dovecot","text":"<p>Connect using telnet:</p> <pre><code>telnet your-server-ip 110\n</code></pre> <p>Try logging in with a user account.</p> <p>Everything is now organized for easy execution. Let me know if you need any refinements! \ud83d\ude80</p>"},{"location":"linux/install_samba/","title":"Install samba","text":"<p>To install the Samba package on all app servers in company-name Datacenter, follow these steps:</p>"},{"location":"linux/install_samba/#step-1-install-samba-on-each-app-server","title":"Step 1: Install Samba on Each App Server","text":"<p>Run the following command, depending on the operating system:</p>"},{"location":"linux/install_samba/#for-rhelcentos-based-systems","title":"For RHEL/CentOS-based systems:","text":"<pre><code>sudo yum install -y samba\n</code></pre>"},{"location":"linux/install_samba/#for-ubuntudebian-based-systems","title":"For Ubuntu/Debian-based systems:","text":"<pre><code>sudo apt update &amp;&amp; sudo apt install -y samba\n</code></pre>"},{"location":"linux/install_samba/#step-2-start-and-enable-samba-service","title":"Step 2: Start and Enable Samba Service","text":"<p>After installation, start and enable the Samba service:</p> <pre><code>sudo systemctl start smb\nsudo systemctl enable smb\n</code></pre> <p>Check the status:</p> <pre><code>systemctl status smb\n</code></pre>"},{"location":"linux/install_samba/#step-3-verify-installation","title":"Step 3: Verify Installation","text":"<p>Confirm that Samba is installed:</p> <pre><code>smbd --version\n</code></pre>"},{"location":"linux/install_samba/#step-4-automating-installation-on-multiple-servers","title":"Step 4: Automating Installation on Multiple Servers","text":"<p>If installing across multiple servers, use Ansible or an SSH loop.</p>"},{"location":"linux/install_samba/#using-ansible","title":"Using Ansible","text":"<p>Create a playbook <code>install_samba.yml</code>:</p> <pre><code>- name: Install Samba on Multiple Servers\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install Samba (RHEL-based)\n      yum:\n        name: samba\n        state: present\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Install Samba (Debian-based)\n      apt:\n        name: samba\n        state: present\n      when: ansible_os_family == \"Debian\"\n\n    - name: Start and Enable Samba Service\n      service:\n        name: smb\n        state: started\n        enabled: yes\n</code></pre> <p>Run it:</p> <pre><code>ansible-playbook -i inventory install_samba.yml\n</code></pre>"},{"location":"linux/install_samba/#using-ssh-loop","title":"Using SSH Loop","text":"<pre><code>SERVERS=(\"app-server1\" \"app-server2\" \"app-server3\")\nfor SERVER in \"${SERVERS[@]}\"; do\n  ssh $SERVER \"sudo yum install -y samba &amp;&amp; sudo systemctl start smb &amp;&amp; sudo systemctl enable smb\"\ndone\n</code></pre> <p>Once installed, Samba should be ready for use across all servers! \ud83d\ude80 Let me know if you need modifications.</p>"},{"location":"linux/iptables_installation_and_config/","title":"Secure apache port.","text":"<p>How to  secure Apache\u2019s port (8085) using <code>iptables</code> on the app hosts while allowing access only from a single server.</p>"},{"location":"linux/iptables_installation_and_config/#step-1-install-iptables-and-dependencies","title":"Step 1: Install <code>iptables</code> and Dependencies","text":"<ol> <li>Update the system:    <code>bash    sudo yum update -y</code></li> <li>Install <code>iptables</code>:    <code>bash    sudo yum install -y iptables-services</code></li> </ol>"},{"location":"linux/iptables_installation_and_config/#step-2-configure-firewall-rules","title":"Step 2: Configure Firewall Rules","text":"<ol> <li>Check the LBR host\u2019s IP (Replace <code>LBR_IP</code> with actual IP):    <code>bash    sudo iptables -A INPUT -p tcp --dport 8085 -s LBR_IP -j ACCEPT</code></li> <li>Block Everyone Else:    <code>bash    sudo iptables -A INPUT -p tcp --dport 8085 -j DROP</code></li> </ol>"},{"location":"linux/iptables_installation_and_config/#step-3-save-and-persist-rules","title":"Step 3: Save and Persist Rules","text":"<ol> <li>Save the rules:    <code>bash    sudo service iptables save</code></li> <li>Enable and Start <code>iptables</code> to persist across reboots:    <code>bash    sudo systemctl enable iptables    sudo systemctl start iptables</code></li> </ol>"},{"location":"linux/iptables_installation_and_config/#step-4-verify-firewall-rules","title":"Step 4: Verify Firewall Rules","text":"<ol> <li>List active rules:    <code>bash    sudo iptables -L -n</code></li> <li>Test the firewall by accessing port 8085.</li> </ol> <p>Now, port 8085 is secured, allowing only the LBR host, and rules persist across reboots! \ud83d\ude80 Let me know if you need any refinements.</p>"},{"location":"linux/linux_nginx_reverse_proxy/","title":"NGINX reverse proxy","text":"<p>step-by-step setup guide to deploy the front-end application on a server:</p>"},{"location":"linux/linux_nginx_reverse_proxy/#step-1-install-apache-and-configure-port-8087","title":"Step 1: Install Apache and Configure Port 8087","text":"<ol> <li>Install Apache: <code>bash    sudo yum install -y httpd</code></li> <li>Modify Apache's Port Configuration:    Edit the Apache config file:    <code>bash    sudo nano /etc/httpd/conf/httpd.conf</code>    Change the <code>Listen</code> directive:    <code>Listen 8087</code></li> <li>Restart Apache to Apply Changes: <code>bash    sudo systemctl restart httpd</code></li> </ol>"},{"location":"linux/linux_nginx_reverse_proxy/#step-2-install-nginx-and-configure-port-8096","title":"Step 2: Install Nginx and Configure Port 8096","text":"<ol> <li>Install Nginx: <code>bash    sudo yum install -y nginx</code></li> <li>Modify Nginx Configuration:    Edit <code>/etc/nginx/nginx.conf</code>:    <code>bash    sudo nano /etc/nginx/nginx.conf</code>    Set Nginx to listen on port 8096:    <code>server {        listen 8096;        location / {            proxy_pass http://127.0.0.1:8087;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;        }    }</code></li> <li>Restart Nginx to Apply Changes: <code>bash    sudo systemctl restart nginx</code></li> </ol>"},{"location":"linux/linux_nginx_reverse_proxy/#step-3-configure-nginx-as-reverse-proxy","title":"Step 3: Configure Nginx as Reverse Proxy","text":"<ul> <li>The above configuration already sets Nginx as a reverse proxy by forwarding requests on 8096 \u2192 Apache (8087). </li> <li>Ensure Apache and Nginx are running correctly with:   <code>bash   sudo systemctl status httpd nginx</code></li> </ul>"},{"location":"linux/linux_nginx_reverse_proxy/#step-4-copy-index-file-to-apaches-document-root","title":"Step 4: Copy Index File to Apache\u2019s Document Root","text":"<ol> <li>Copy the <code>index.html</code> file from Jump Host:    <code>bash    scp thor@jump-host:/home/thor/index.html /var/www/html/index.html</code></li> <li>Set correct permissions:    <code>bash    sudo chmod 644 /var/www/html/index.html    sudo chown apache:apache /var/www/html/index.html</code></li> </ol>"},{"location":"linux/linux_nginx_reverse_proxy/#step-5-start-and-enable-services","title":"Step 5: Start and Enable Services","text":"<p>Ensure both servers start on boot:</p> <pre><code>sudo systemctl enable httpd nginx\nsudo systemctl start httpd nginx\n</code></pre>"},{"location":"linux/linux_nginx_reverse_proxy/#step-6-test-configuration","title":"Step 6: Test Configuration","text":"<p>Run:</p> <pre><code>curl http://&lt;BackupServerIP&gt;:8096\n</code></pre> <p>If configured correctly, you should see the index.html content.</p> <p>Your Nautilus Backup Server is now set up with Apache (8087) behind Nginx (8096) acting as a reverse proxy. \ud83d\ude80 Let me know if you need any refinements!</p>"},{"location":"linux/mariadb_troubleshoot/","title":"Mariadb troubleshoot","text":"<p>This warning usually indicates a permission issue or a disk space problem when a service (like MySQL or MariaDB) tries to create a temporary test file. Here\u2019s how you can troubleshoot:</p>"},{"location":"linux/mariadb_troubleshoot/#1-check-disk-space","title":"1. Check Disk Space","text":"<p>Run:</p> <pre><code>df -h\n</code></pre> <p>If the disk is full, free up space.</p>"},{"location":"linux/mariadb_troubleshoot/#2-verify-directory-permissions","title":"2. Verify Directory Permissions","text":"<p>Check the ownership and permissions of the directory where the test file is being created:</p> <pre><code>ls -ld /var/lib/mysql\n</code></pre> <p>If needed, reset ownership:</p> <pre><code>sudo chown -R mysql:mysql /var/lib/mysql\n</code></pre>"},{"location":"linux/mariadb_troubleshoot/#3-check-selinux-or-apparmor","title":"3. Check SELinux or AppArmor","text":"<p>If SELinux is enabled, try:</p> <pre><code>sudo setenforce 0\n</code></pre> <p>For AppArmor (Ubuntu), disable MySQL restrictions:</p> <pre><code>sudo aa-disable /usr/sbin/mysqld\n</code></pre>"},{"location":"linux/mariadb_troubleshoot/#4-restart-the-service","title":"4. Restart the Service","text":"<pre><code>sudo systemctl restart mysql\n</code></pre> <p>or</p> <pre><code>sudo systemctl restart mariadb\n</code></pre> <p>For more details, check out this discussion or this troubleshooting guide. Let me know if you need further assistance! \ud83d\ude80</p>"},{"location":"linux/selinux_serurity/","title":"Selinux serurity","text":"<p>To meet the security requirements for SELinux on App Server, follow these steps:</p>"},{"location":"linux/selinux_serurity/#step-1-install-required-selinux-packages","title":"Step 1: Install Required SELinux Packages","text":"<p>If SELinux is not installed, install it using:</p> <pre><code>sudo yum install -y selinux-policy selinux-policy-targeted\n</code></pre> <p>For RHEL/CentOS systems.</p> <p>Or for Debian/Ubuntu-based systems:</p> <pre><code>sudo apt install -y selinux-utils policycoreutils selinux-policy-default\n</code></pre>"},{"location":"linux/selinux_serurity/#step-2-permanently-disable-selinux","title":"Step 2: Permanently Disable SELinux","text":"<p>Modify the SELinux configuration file to disable SELinux:</p> <pre><code>sudo sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config\n</code></pre> <p>Alternatively, manually edit the file:</p> <pre><code>sudo nano /etc/selinux/config\n</code></pre> <p>Change the line:</p> <pre><code>SELINUX=enforcing\n</code></pre> <p>To:</p> <pre><code>SELINUX=disabled\n</code></pre> <p>Save and exit.</p>"},{"location":"linux/selinux_serurity/#step-3-confirm-the-change-without-considering-current-status","title":"Step 3: Confirm the Change Without Considering Current Status","text":"<p>Since no immediate reboot is required, verify that SELinux is set to be disabled after the next reboot:</p> <pre><code>grep SELINUX= /etc/selinux/config\n</code></pre> <p>The output should show:</p> <pre><code>SELINUX=disabled\n</code></pre> <p>Once the maintenance reboot occurs, SELinux will remain disabled as per the configuration.</p> <p>Let me know if you need any refinements! \ud83d\ude80</p>"},{"location":"linux/services/","title":"Services","text":"<p>To install and configure Postfix on all application servers in company-name Datacenter, follow these steps:</p>"},{"location":"linux/services/#step-1-install-postfix","title":"Step 1: Install Postfix","text":"<p>Run the appropriate installation command based on the server's OS:</p>"},{"location":"linux/services/#for-rhelcentos-based-systems","title":"For RHEL/CentOS-based systems:","text":"<pre><code>sudo yum install -y postfix\n</code></pre>"},{"location":"linux/services/#for-ubuntudebian-based-systems","title":"For Ubuntu/Debian-based systems:","text":"<pre><code>sudo apt update &amp;&amp; sudo apt install -y postfix\n</code></pre>"},{"location":"linux/services/#step-2-enable-postfix-to-start-on-boot","title":"Step 2: Enable Postfix to Start on Boot","text":"<pre><code>sudo systemctl enable postfix\nsudo systemctl start postfix\n</code></pre> <p>Verify the service status:</p> <pre><code>systemctl status postfix\n</code></pre> <p>It should display active (running).</p>"},{"location":"linux/services/#step-3-automate-across-multiple-servers","title":"Step 3: Automate Across Multiple Servers","text":"<p>If setting this up on multiple servers, use Ansible or an SSH loop:</p>"},{"location":"linux/services/#using-ansible","title":"Using Ansible","text":"<p>Create a playbook <code>install_postfix.yml</code>:</p> <pre><code>- name: Install and Configure Postfix\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install Postfix (RHEL-based)\n      yum:\n        name: postfix\n        state: present\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Install Postfix (Debian-based)\n      apt:\n        name: postfix\n        state: present\n      when: ansible_os_family == \"Debian\"\n\n    - name: Enable and Start Postfix\n      service:\n        name: postfix\n        state: started\n        enabled: yes\n</code></pre> <p>Run it:</p> <pre><code>ansible-playbook -i inventory install_postfix.yml\n</code></pre>"},{"location":"linux/services/#using-ssh-loop","title":"Using SSH Loop","text":"<pre><code>SERVERS=(\"app-server1\" \"app-server2\" \"app-server3\")\nfor SERVER in \"${SERVERS[@]}\"; do\n  ssh $SERVER \"sudo yum install -y postfix &amp;&amp; sudo systemctl enable postfix &amp;&amp; sudo systemctl start postfix\"\ndone\n</code></pre> <p>Now, Postfix is installed and enabled across all application servers! \ud83d\ude80 Let me know if you need further refinements.</p>"},{"location":"linux/ssh_authentication/","title":"Ssh authentication","text":"<p>To set up password-less SSH authentication from the <code>thor</code> user on the jump host to all app servers via their respective sudo users, follow these steps:</p>"},{"location":"linux/ssh_authentication/#step-1-generate-ssh-key-on-jump-host","title":"Step 1: Generate SSH Key on Jump Host","text":"<p>Log in as <code>thor</code> on the jump host and generate an SSH key pair:</p> <pre><code>ssh-keygen -t rsa -b 4096\n</code></pre> <ul> <li>Press <code>Enter</code> for the default location (<code>~/.ssh/id_rsa</code>).</li> <li>Leave the passphrase empty for password-less access.</li> </ul>"},{"location":"linux/ssh_authentication/#step-2-copy-the-public-key-to-each-app-server","title":"Step 2: Copy the Public Key to Each App Server","text":"<p>For each server, copy <code>thor</code>'s public key to the corresponding sudo user (e.g., <code>username</code> for appserver):</p> <pre><code>ssh-copy-id username@app-server1\nssh-copy-id username@app-server2\nssh-copy-id bruce@app-server3\n</code></pre> <p>Replace <code>username</code>, <code>username</code>, <code>bruce</code> with the respective sudo usernames and app-serverX with actual server names or IPs.</p> <p>If <code>ssh-copy-id</code> isn\u2019t available, manually copy the key:</p> <pre><code>cat ~/.ssh/id_rsa.pub | ssh username@app-server1 'mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys'\n</code></pre>"},{"location":"linux/ssh_authentication/#step-3-verify-password-less-login","title":"Step 3: Verify Password-less Login","text":"<p>Test by running:</p> <pre><code>ssh username@app-server1\n</code></pre> <p>If it logs in without a password, authentication is working.</p> <p>Repeat for other servers:</p> <pre><code>ssh username@app-server2\nssh bruce@app-server3\n</code></pre>"},{"location":"linux/ssh_authentication/#step-4-restrict-root-access-optional-for-security","title":"Step 4: Restrict Root Access (Optional for Security)","text":"<p>Prevent password login in <code>/etc/ssh/sshd_config</code>:</p> <pre><code>PermitRootLogin no\nPasswordAuthentication no\n</code></pre> <p>Then restart SSH:</p> <pre><code>sudo systemctl restart sshd\n</code></pre> <p>Now <code>thor</code> can access all app servers without needing a password, ensuring smooth automation for scripts. \ud83d\ude80 Let me know if you need modifications!</p>"},{"location":"linux/string_substitue_sed/","title":"String substitue sed","text":"<p>To modify the <code>/home/BSD.txt</code> file based on your requirements, follow these steps:</p>"},{"location":"linux/string_substitue_sed/#step-1-delete-lines-containing-the-word-following","title":"Step 1: Delete Lines Containing the Word \"following\"","text":"<p>Use <code>grep</code> to remove lines containing <code>\"following\"</code> and save the result in <code>/home/BSD_DELETE.txt</code>:</p> <pre><code>grep -v 'following' /home/BSD.txt &gt; /home/BSD_DELETE.txt\n</code></pre> <ul> <li><code>grep -v</code> \u2192 Excludes lines containing <code>\"following\"</code></li> <li><code>&gt;</code> \u2192 Saves the output to <code>/home/BSD_DELETE.txt</code></li> </ul>"},{"location":"linux/string_substitue_sed/#step-2-replace-the-with-their-without-altering-substrings","title":"Step 2: Replace \"the\" with \"their\" Without Altering Substrings","text":"<p>Use <code>sed</code> with word boundaries to ensure only exact matches of <code>\"the\"</code> are replaced:</p> <pre><code>sed 's/\\bthe\\b/their/g' /home/BSD.txt &gt; /home/BSD_REPLACE.txt\n</code></pre> <ul> <li><code>\\bthe\\b</code> \u2192 Matches only the whole word <code>\"the\"</code></li> <li><code>s/.../.../g</code> \u2192 Performs the substitution globally</li> <li><code>&gt;</code> \u2192 Saves the output to <code>/home/BSD_REPLACE.txt</code></li> </ul>"},{"location":"linux/string_substitue_sed/#verification","title":"Verification","text":"<p>Check if changes were applied:</p> <pre><code>cat /home/BSD_DELETE.txt\ncat /home/BSD_REPLACE.txt\n</code></pre> <p>This ensures that the modifications follow the compliance requirements correctly. Let me know if you need further refinements! \ud83d\ude80</p>"},{"location":"linux/tshoot_haproxy/","title":"Tshoot haproxy","text":"<p>To troubleshoot and fix the HAProxy service on the Nautilus LBR server, follow these steps:</p>"},{"location":"linux/tshoot_haproxy/#1-check-haproxy-service-status","title":"1. Check HAProxy Service Status","text":"<p>Run:</p> <pre><code>sudo systemctl status haproxy\n</code></pre> <p>If the service is inactive or failed, restart it:</p> <pre><code>sudo systemctl restart haproxy\n</code></pre>"},{"location":"linux/tshoot_haproxy/#2-check-logs-for-errors","title":"2. Check Logs for Errors","text":"<p>View logs to identify issues:</p> <pre><code>sudo journalctl -u haproxy --no-pager | tail -20\n</code></pre> <p>or check HAProxy logs:</p> <pre><code>cat /var/log/haproxy.log\n</code></pre>"},{"location":"linux/tshoot_haproxy/#3-verify-haproxy-configuration","title":"3. Verify HAProxy Configuration","text":"<p>Check for syntax errors:</p> <pre><code>sudo haproxy -c -f /etc/haproxy/haproxy.cfg\n</code></pre> <p>If errors exist, edit the config file:</p> <pre><code>sudo nano /etc/haproxy/haproxy.cfg\n</code></pre> <p>Then restart HAProxy:</p> <pre><code>sudo systemctl restart haproxy\n</code></pre>"},{"location":"linux/tshoot_haproxy/#4-ensure-haproxy-is-listening-on-the-correct-ports","title":"4. Ensure HAProxy is Listening on the Correct Ports","text":"<p>Check active ports:</p> <pre><code>sudo netstat -tulnp | grep haproxy\n</code></pre> <p>or</p> <pre><code>sudo ss -tulnp | grep haproxy\n</code></pre> <p>If HAProxy is not listening, verify the <code>haproxy.cfg</code> file.</p>"},{"location":"linux/tshoot_haproxy/#5-test-website-access","title":"5. Test Website Access","text":"<p>Once HAProxy is running, try accessing the website using the StaticApp button.</p> <p>For more troubleshooting steps, check out this guide or this tutorial. Let me know if you need further assistance! \ud83d\ude80</p>"},{"location":"linux/update_permissions/","title":"Update permissions","text":"<p>To grant kirsty the ability to run Docker commands without <code>sudo</code>, follow these steps:</p> <ol> <li>Add the User to the Docker Group    Run the following command on appserver to add <code>kirsty</code> to the <code>docker</code> group:</li> </ol> <p><code>bash    sudo usermod -aG docker kirsty</code></p> <ol> <li> <p>Apply Group Changes    The user needs to log out and log back in for the changes to take effect. You can prompt kirsty to do so or restart the system.</p> </li> <li> <p>Verify Access    Once logged back in, check if kirsty can run Docker commands without <code>sudo</code>:</p> </li> </ol> <p><code>bash    docker ps</code></p> <p>If the command runs successfully without requiring <code>sudo</code>, the setup is complete. If you run into any issues, let me know\u2014I\u2019ve got your back! \ud83d\ude80</p>"},{"location":"linux/user_data_transfer/","title":"Linux User Data Transfer","text":"<p>You can achieve this using the <code>find</code> command in Linux. Here's how:</p> <pre><code>find /home/usersdata -type f -user ammar -exec cp --parents {} /media \\;\n</code></pre>"},{"location":"linux/user_data_transfer/#explanation","title":"Explanation","text":"<ul> <li><code>find /home/usersdata</code> \u2192 Searches within the <code>/home/usersdata</code> directory.</li> <li><code>-type f</code> \u2192 Filters only files, excluding directories.</li> <li><code>-user ammar</code> \u2192 Finds files owned by the user <code>ammar</code>.</li> <li><code>-exec cp --parents {} /media \\;</code> \u2192 Copies files while preserving the directory structure.</li> </ul>"},{"location":"linux/user_data_transfer/#verification","title":"Verification","text":"<p>After execution, confirm the copied files using:</p> <pre><code>ls -R /media\n</code></pre> <p>Let me know if you need refinements or additional operations! \ud83d\ude80</p>"},{"location":"linux/user_limits/","title":"User limits","text":"<p>To enforce process limitations for the <code>nfsuser</code> user, you need to configure the limits in the <code>/etc/security/limits.conf</code> file. Follow these steps:</p>"},{"location":"linux/user_limits/#step-1-edit-the-limits-configuration-file","title":"Step 1: Edit the Limits Configuration File","text":"<p>Open the file using a text editor:</p> <pre><code>sudo nano /etc/security/limits.conf\n</code></pre>"},{"location":"linux/user_limits/#step-2-add-limits-for-nfsuser","title":"Step 2: Add Limits for <code>nfsuser</code>","text":"<p>Append the following lines at the end of the file:</p> <pre><code>nfsuser soft nproc 1026\nnfsuser hard nproc 2026\n</code></pre>"},{"location":"linux/user_limits/#step-3-save-and-exit","title":"Step 3: Save and Exit","text":"<p>Press <code>CTRL + X</code>, then <code>Y</code>, and hit <code>ENTER</code> to save the changes.</p>"},{"location":"linux/user_limits/#step-4-apply-the-changes","title":"Step 4: Apply the Changes","text":"<p>Ensure the PAM module is enforcing these limits:</p> <pre><code>sudo nano /etc/pam.d/common-session\n</code></pre> <p>Confirm or add this line:</p> <pre><code>session required pam_limits.so\n</code></pre> <p>Save and exit.</p>"},{"location":"linux/user_limits/#step-5-verify-the-configuration","title":"Step 5: Verify the Configuration","text":"<p>To check the current limits for <code>nfsuser</code>, run:</p> <pre><code>ulimit -u -S\nulimit -u -H\n</code></pre> <p>You may also switch to the <code>nfsuser</code> account and test:</p> <pre><code>su - nfsuser\nulimit -u\n</code></pre> <p>This should reflect the soft and hard process limits.</p> <p>Let me know if you need further refinements! \ud83d\ude80</p>"},{"location":"linux/user_setup_non_interactive_shell/","title":"Linux User setup with a non interactive shell","text":"<p>You can create a user named <code>mark</code> with a non-interactive shell on App Server 3 by following these steps:</p>"},{"location":"linux/user_setup_non_interactive_shell/#step-1-create-the-user-with-a-non-interactive-shell","title":"Step 1: Create the User with a Non-Interactive Shell","text":"<p>Run the following command:</p> <pre><code>sudo useradd -M -s /sbin/nologin mark\n</code></pre> <ul> <li><code>-M</code> \u2192 Prevents the creation of a home directory.</li> <li><code>-s /sbin/nologin</code> \u2192 Assigns a non-interactive shell, meaning the user can't log in.</li> </ul>"},{"location":"linux/user_setup_non_interactive_shell/#step-2-verify-the-user-configuration","title":"Step 2: Verify the User Configuration","text":"<p>Check if the user was created successfully:</p> <pre><code>getent passwd mark\n</code></pre> <p>This will show the user's details, including their assigned shell.</p>"},{"location":"linux/user_setup_non_interactive_shell/#step-3-confirm-login-restriction","title":"Step 3: Confirm Login Restriction","text":"<p>Try switching to the user:</p> <pre><code>su - mark\n</code></pre> <p>If configured correctly, it should deny interactive login access.</p> <p>This ensures security while allowing the backup agent tool to function as needed. Let me know if you need any tweaks! \ud83d\ude80</p>"}]}